#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞
–°–æ–∑–¥–∞–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, —Ñ–∞–π–ª—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
"""

import os
import sys
import subprocess
import platform
import logging
from pathlib import Path
import shutil


class BotSetup:
    """–ö–ª–∞—Å—Å –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞"""

    def __init__(self):
        self.setup_logging()
        self.logger = logging.getLogger(__name__)
        self.errors = []
        self.warnings = []
        self.project_root = Path.cwd()

    def setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è setup"""
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s',
            handlers=[
                logging.StreamHandler(sys.stdout)
            ]
        )

    def print_header(self):
        """–ü–µ—á–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
        print("\n" + "=" * 70)
        print("üöÄ BYBIT TRADING BOT SETUP")
        print("=" * 70)
        print(f"üñ•Ô∏è  Platform: {platform.system()} {platform.release()}")
        print(f"üêç Python: {sys.version.split()[0]}")
        print(f"üìÅ Project Root: {self.project_root}")
        print("=" * 70)

    def check_python_version(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python"""
        print("\nüìã Checking Python version...")

        version = sys.version_info
        if version.major < 3 or (version.major == 3 and version.minor < 8):
            self.errors.append("Python 3.8+ required")
            print("‚ùå Python 3.8+ is required!")
            return False

        print(f"‚úÖ Python {version.major}.{version.minor}.{version.micro} - OK")
        return True

    def fix_data_directory_issue(self):
        """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π data"""
        print("\nüîß Fixing data directory issue...")

        data_path = self.project_root / 'data'

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–∞–π–ª data –≤–º–µ—Å—Ç–æ –ø–∞–ø–∫–∏
            if data_path.exists() and data_path.is_file():
                print(f"‚ö†Ô∏è  Found file 'data' instead of directory, removing...")
                data_path.unlink()
                print("‚úÖ File 'data' removed")

            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é data
            data_path.mkdir(exist_ok=True)
            print("‚úÖ Directory 'data' created")

            return True

        except Exception as e:
            self.errors.append(f"Failed to fix data directory: {e}")
            print(f"‚ùå Failed to fix data directory: {e}")
            return False

    def create_directories(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π —Å–æ–≥–ª–∞—Å–Ω–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –ø—Ä–æ–µ–∫—Ç–∞"""
        print("\nüìÅ Creating directories...")

        # –°–Ω–∞—á–∞–ª–∞ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—É —Å data
        self.fix_data_directory_issue()

        directories = [
            'config',
            'logs',
            'logs/strategies',
            'logs/telegram',
            'logs/trades',
            'logs/validation',
            'modules',
            'performance_data',
            'strategies',
            'tests',
            'utils',
            'data/diary',
            'data/performance',
            'data/validation',
            'data/backtest',
            'exports',
            'temp'
        ]

        created_count = 0
        for directory in directories:
            try:
                dir_path = self.project_root / directory
                dir_path.mkdir(parents=True, exist_ok=True)
                print(f"‚úÖ {directory}")
                created_count += 1
            except Exception as e:
                self.errors.append(f"Failed to create {directory}: {e}")
                print(f"‚ùå {directory}: {e}")

        print(f"\nüìä Created/verified {created_count}/{len(directories)} directories")
        return len(self.errors) == 0

    def create_config_files(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        print("\n‚öôÔ∏è  Creating configuration files...")

        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥
        config_file = self.project_root / 'config' / 'config.env'
        if not config_file.exists():
            try:
                config_content = """# ByBit API Configuration
# –í–ê–ñ–ù–û: –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ API –∫–ª—é—á–∏!
BYBIT_API_KEY=your_api_key_here
BYBIT_API_SECRET=your_api_secret_here
BYBIT_TESTNET=True

# Bot Configuration
CYCLE_INTERVAL=60
MAX_POSITIONS=3
RISK_PER_TRADE=0.02

# Logging Level (DEBUG, INFO, WARNING, ERROR)
LOG_LEVEL=INFO

# Telegram Notifications (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
TELEGRAM_BOT_TOKEN=
TELEGRAM_CHAT_ID=
TELEGRAM_ENABLED=False

# Email Notifications (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
SMTP_SERVER=
SMTP_PORT=587
EMAIL_ADDRESS=
EMAIL_PASSWORD=
EMAIL_ENABLED=False

# Database (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
DATABASE_ENABLED=False
DATABASE_PATH=data/trading_bot.db

# Performance Settings
SAVE_PERFORMANCE_DATA=True
PERFORMANCE_SAVE_INTERVAL=300

# Strategy Settings
STRATEGY_VALIDATION_ENABLED=True
MIN_SIGNAL_CONFIDENCE=0.6
"""
                config_file.write_text(config_content, encoding='utf-8')
                print("‚úÖ config/config.env created")
            except Exception as e:
                self.errors.append(f"Failed to create config.env: {e}")
                print(f"‚ùå config/config.env: {e}")
        else:
            print("‚úÖ config/config.env already exists")

        # .gitignore
        gitignore_file = self.project_root / '.gitignore'
        if not gitignore_file.exists():
            try:
                gitignore_content = """# Trading Bot .gitignore

# Configuration files with sensitive data
config/config.env
.env
*.env

# Logs
logs/
*.log

# Data files
data/
performance_data/
exports/
temp/

# Python
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
*.egg-info/
.installed.cfg
*.egg

# Virtual environments
venv/
env/
ENV/
.venv/

# IDE
.vscode/
.idea/
*.swp
*.swo

# OS
.DS_Store
Thumbs.db

# Jupyter Notebooks
.ipynb_checkpoints

# pytest
.pytest_cache/
.coverage

# mypy
.mypy_cache/

# CSV files
*.csv
"""
                gitignore_file.write_text(gitignore_content, encoding='utf-8')
                print("‚úÖ .gitignore created")
            except Exception as e:
                self.warnings.append(f"Failed to create .gitignore: {e}")

    def create_init_files(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ __init__.py —Ñ–∞–π–ª–æ–≤ –¥–ª—è –≤—Å–µ—Ö –ø–∞–∫–µ—Ç–æ–≤"""
        print("\nüìù Creating __init__.py files...")

        init_dirs = ['config', 'modules', 'strategies', 'tests', 'utils']

        for dir_name in init_dirs:
            try:
                init_file = self.project_root / dir_name / '__init__.py'
                if not init_file.exists():
                    init_file.write_text(f"# {dir_name.title()} package\n", encoding='utf-8')
                    print(f"‚úÖ {dir_name}/__init__.py created")
                else:
                    print(f"‚úÖ {dir_name}/__init__.py already exists")
            except Exception as e:
                self.warnings.append(f"Failed to create {dir_name}/__init__.py: {e}")

    def create_startup_scripts(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤ –∑–∞–ø—É—Å–∫–∞"""
        print("\nüöÄ Creating startup scripts...")

        # Windows batch —Ñ–∞–π–ª
        if platform.system() == "Windows":
            bat_content = """@echo off
chcp 65001 >nul
echo Starting ByBit Trading Bot...
echo.

REM –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
if not exist ".venv" (
    echo Creating virtual environment...
    python -m venv .venv
)

REM –ê–∫—Ç–∏–≤–∞—Ü–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
call .venv\\Scripts\\activate.bat

REM –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ pip
echo Updating pip...
python -m pip install --upgrade pip

REM –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
echo Installing dependencies...
pip install -r requirements.txt

REM –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
echo Starting bot...
python main.py

pause
"""
            try:
                bat_file = self.project_root / 'start_bot.bat'
                bat_file.write_text(bat_content, encoding='utf-8')
                print("‚úÖ start_bot.bat created")
            except Exception as e:
                self.warnings.append(f"Failed to create start_bot.bat: {e}")

        # Unix shell script
        else:
            sh_content = """#!/bin/bash
echo "Starting ByBit Trading Bot..."
echo

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
if [ ! -d ".venv" ]; then
    echo "Creating virtual environment..."
    python3 -m venv .venv
fi

# –ê–∫—Ç–∏–≤–∞—Ü–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
source .venv/bin/activate

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ pip
echo "Updating pip..."
python -m pip install --upgrade pip

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
echo "Installing dependencies..."
pip install -r requirements.txt

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
echo "Starting bot..."
python main.py
"""
            try:
                script_file = self.project_root / 'start_bot.sh'
                script_file.write_text(sh_content, encoding='utf-8')
                script_file.chmod(0o755)  # –î–µ–ª–∞–µ–º –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º
                print("‚úÖ start_bot.sh created")
            except Exception as e:
                self.warnings.append(f"Failed to create start_bot.sh: {e}")

    def check_and_install_dependencies(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        print("\nüì¶ Checking dependencies...")

        requirements_file = self.project_root / 'requirements.txt'
        if not requirements_file.exists():
            print("‚ö†Ô∏è  requirements.txt not found, creating default...")
            self.create_requirements_file()

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º pip
            subprocess.run([sys.executable, '-m', 'pip', '--version'],
                           check=True, capture_output=True)
            print("‚úÖ pip is available")

            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
            response = input("\nü§î Install dependencies now? (y/n): ").lower().strip()
            if response in ['y', 'yes', '–¥–∞', '–¥', '']:
                print("üì• Installing dependencies...")

                # –û–±–Ω–æ–≤–ª—è–µ–º pip
                print("üîÑ Updating pip...")
                subprocess.run([sys.executable, '-m', 'pip', 'install', '--upgrade', 'pip'],
                               capture_output=True, text=True, encoding='utf-8', errors='ignore')

                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π
                print("üì¶ Installing packages...")
                result = subprocess.run([
                    sys.executable, '-m', 'pip', 'install', '-r', str(requirements_file)
                ], capture_output=True, text=True, encoding='utf-8', errors='ignore')

                if result.returncode == 0:
                    print("‚úÖ Dependencies installed successfully")
                    return True
                else:
                    error_msg = result.stderr if result.stderr else "Unknown error"
                    self.errors.append(f"Failed to install dependencies: {error_msg}")
                    print(f"‚ùå Failed to install dependencies")
                    print(f"Error: {error_msg}")

                    # –ü—Ä–æ–±—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ –æ–¥–Ω–æ–º—É
                    print("üîÑ Trying to install packages individually...")
                    self.install_packages_individually()
                    return False
            else:
                print("‚è≠Ô∏è  Skipping dependency installation")
                print("üí° Run: pip install -r requirements.txt")
                return True

        except subprocess.CalledProcessError as e:
            self.errors.append(f"pip not available: {e}")
            print(f"‚ùå pip not available: {e}")
            return False

    def install_packages_individually(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞–∫–µ—Ç–æ–≤ –ø–æ –æ–¥–Ω–æ–º—É"""
        packages = [
            'pandas>=1.5.0',
            'numpy>=1.21.0',
            'pybit>=5.6.0',
            'python-dotenv>=0.19.0',
            'ta>=0.10.2',
            'requests>=2.28.0',
            'colorlog>=6.7.0'
        ]

        for package in packages:
            try:
                print(f"üì¶ Installing {package}...")
                result = subprocess.run([
                    sys.executable, '-m', 'pip', 'install', package
                ], capture_output=True, text=True, encoding='utf-8', errors='ignore')

                if result.returncode == 0:
                    print(f"‚úÖ {package} installed")
                else:
                    print(f"‚ùå Failed to install {package}")

            except Exception as e:
                print(f"‚ùå Error installing {package}: {e}")

    def create_requirements_file(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ requirements.txt"""
        requirements_content = """# Trading Bot Requirements

# Core dependencies
pandas>=1.5.0
numpy>=1.21.0
pybit>=5.6.0
python-dotenv>=0.19.0

# Technical Analysis
ta>=0.10.2

# HTTP requests
requests>=2.28.0

# Logging and utilities
colorlog>=6.7.0
"""
        try:
            requirements_file = self.project_root / 'requirements.txt'
            requirements_file.write_text(requirements_content, encoding='utf-8')
            print("‚úÖ requirements.txt created")
        except Exception as e:
            self.warnings.append(f"Failed to create requirements.txt: {e}")

    def run_tests(self):
        """–ó–∞–ø—É—Å–∫ –±–∞–∑–æ–≤—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("\nüß™ Running basic tests...")

        try:
            # –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
            test_imports = [
                ('pandas', 'pandas'),
                ('numpy', 'numpy'),
                ('pybit', 'pybit'),
                ('ta', 'ta'),
                ('requests', 'requests'),
                ('dotenv', 'python_dotenv')
            ]

            failed_imports = []
            for display_name, import_name in test_imports:
                try:
                    __import__(import_name)
                    print(f"‚úÖ {display_name}")
                except ImportError:
                    failed_imports.append(display_name)
                    print(f"‚ùå {display_name}")

            if failed_imports:
                self.warnings.append(f"Missing modules: {', '.join(failed_imports)}")
                print(f"‚ö†Ô∏è  Missing modules: {', '.join(failed_imports)}")
                print("üí° Try running: pip install -r requirements.txt")
                return False
            else:
                print("‚úÖ All critical modules available")
                return True

        except Exception as e:
            self.warnings.append(f"Test error: {e}")
            return False

    def check_project_structure(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞"""
        print("\nüîç Checking project structure...")

        required_files = [
            'main.py',
            'config/trading_config.py',
            'modules/data_fetcher.py',
            'modules/market_analyzer.py',
            'modules/order_manager.py',
            'modules/position_manager.py',
            'modules/risk_manager.py',
            'modules/performance_tracker.py',
            'strategies/base_strategy.py',
            'strategies/multi_indicator_strategy.py'
        ]

        missing_files = []
        for file_path in required_files:
            if not (self.project_root / file_path).exists():
                missing_files.append(file_path)
                print(f"‚ùå {file_path}")
            else:
                print(f"‚úÖ {file_path}")

        if missing_files:
            self.warnings.append(f"Missing files: {', '.join(missing_files)}")
            print(f"\n‚ö†Ô∏è  Missing {len(missing_files)} required files")
            return False
        else:
            print("\n‚úÖ All required files present")
            return True

    def create_pycharm_config(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è PyCharm"""
        print("\nüîß Creating PyCharm configuration...")

        try:
            idea_dir = self.project_root / '.idea'
            idea_dir.mkdir(exist_ok=True)

            # modules.xml
            modules_xml = """<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ProjectModuleManager">
    <modules>
      <module fileurl="file://$PROJECT_DIR$/.idea/trading_bot.iml" filepath="$PROJECT_DIR$/.idea/trading_bot.iml" />
    </modules>
  </component>
</project>"""
            (idea_dir / 'modules.xml').write_text(modules_xml, encoding='utf-8')

            # trading_bot.iml
            iml_content = """<?xml version="1.0" encoding="UTF-8"?>
<module type="PYTHON_MODULE" version="4">
  <component name="NewModuleRootManager">
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$" isTestSource="false" />
      <excludeFolder url="file://$MODULE_DIR$/.venv" />
      <excludeFolder url="file://$MODULE_DIR$/venv" />
      <excludeFolder url="file://$MODULE_DIR$/logs" />
      <excludeFolder url="file://$MODULE_DIR$/performance_data" />
      <excludeFolder url="file://$MODULE_DIR$/data" />
    </content>
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
  </component>
</module>"""
            (idea_dir / 'trading_bot.iml').write_text(iml_content, encoding='utf-8')

            print("‚úÖ PyCharm configuration created")

        except Exception as e:
            self.warnings.append(f"Failed to create PyCharm config: {e}")

    def print_summary(self):
        """–ü–µ—á–∞—Ç—å –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        print("\n" + "=" * 70)
        print("üìä SETUP SUMMARY")
        print("=" * 70)

        if not self.errors:
            print("üéâ Setup completed successfully!")
            print("\n‚úÖ Next steps:")
            print("1. Edit config/config.env with your ByBit API keys")
            print("2. Review trading parameters in config/trading_config.py")
            print("3. Run the bot: python main.py")

            if platform.system() == "Windows":
                print("   Or double-click: start_bot.bat")
            else:
                print("   Or run: ./start_bot.sh")

        else:
            print("‚ö†Ô∏è  Setup completed with errors:")
            for error in self.errors:
                print(f"   ‚ùå {error}")

        if self.warnings:
            print(f"\n‚ö†Ô∏è  Warnings ({len(self.warnings)}):")
            for warning in self.warnings:
                print(f"   ‚ö†Ô∏è  {warning}")

        print("\nüìö Useful commands:")
        print("   - python main.py                    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞")
        print("   - python utils/diary_viewer.py      # –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–Ω–µ–≤–Ω–∏–∫–∞")
        print("   - pip install ta python-dotenv     # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –º–æ–¥—É–ª–µ–π")

        print("\nüÜò Support:")
        print("   - Check logs/ directory for detailed logs")
        print("   - Ensure Python 3.8+ is installed")
        print("   - Verify internet connection for API access")
        print("   - Use TESTNET=True for safe testing")

        print("\n" + "=" * 70)

    def run_setup(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        self.print_header()

        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        if not self.check_python_version():
            return False

        # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        self.create_directories()
        self.create_init_files()
        self.create_config_files()
        self.create_startup_scripts()
        self.create_pycharm_config()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
        self.check_project_structure()

        # –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏ —Ç–µ—Å—Ç—ã
        self.check_and_install_dependencies()
        self.run_tests()

        # –ò—Ç–æ–≥–∏
        self.print_summary()

        return len(self.errors) == 0


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        setup = BotSetup()
        success = setup.run_setup()

        if success:
            print("\nüëã Setup finished successfully!")
            print("üöÄ You can now run: python main.py")
            sys.exit(0)
        else:
            print("\nüí• Setup finished with errors!")
            print("üîß Please fix the errors above and run setup again")

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è Windows
            if platform.system() == "Windows":
                print("\nüí° Quick fix for missing modules:")
                print("   pip install ta python-dotenv")

            sys.exit(1)

    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  Setup interrupted by user")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• Critical setup error: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)


if __name__ == "__main__":
    main()