#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
"""

import sys
from pathlib import Path
from datetime import datetime, timedelta

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent.parent))


def test_strategy_simple():
    """–ü—Ä–æ—Å—Ç–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    try:
        print("üîç –ü–†–û–°–¢–û–ô –¢–ï–°–¢ –°–¢–†–ê–¢–ï–ì–ò–ò")
        print("=" * 40)

        # –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π
        from modules.data_fetcher import DataFetcher
        from strategies.custom_strategy import CustomStrategy
        from user_config import UserConfig

        print("‚úÖ –ú–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")

        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        data_fetcher = DataFetcher()
        print("‚úÖ DataFetcher —Å–æ–∑–¥–∞–Ω")

        # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –±–µ–∑ position_manager –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        user_config_dict = {
            'CUSTOM_STRATEGY_CONFIG': UserConfig.CUSTOM_STRATEGY_CONFIG
        }

        strategy = CustomStrategy(None, None, user_config_dict)
        print("‚úÖ –°—Ç—Ä–∞—Ç–µ–≥–∏—è —Å–æ–∑–¥–∞–Ω–∞")

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        end_time = datetime.now()
        start_time = end_time - timedelta(hours=6)

        df = data_fetcher.get_kline(
            symbol='ETHUSDT',
            interval='5',
            start_time=int(start_time.timestamp()),
            end_time=int(end_time.timestamp())
        )

        if df is None or len(df) == 0:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
            return

        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(df)} —Å–≤–µ—á–µ–π")
        print(f"üìà –¶–µ–Ω–∞: ${df['close'].iloc[-1]:.2f}")

        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
        signals = strategy.generate_signals(df)

        if signals:
            print(f"‚úÖ –°–∏–≥–Ω–∞–ª—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã: {len(signals)}")
            print(f"   RSI: {signals.get('rsi', 0):.1f}")
            print(f"   Volume Ratio: {signals.get('volume_ratio', 0):.2f}")
            print(f"   EMA Fast: {signals.get('ema_fast', 0):.2f}")
            print(f"   EMA Slow: {signals.get('ema_slow', 0):.2f}")

            # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ª–æ–≤–∏–π –≤—Ö–æ–¥–∞
            long_valid, long_score, long_reasons = strategy._check_long_entry_conditions(signals)
            short_valid, short_score, short_reasons = strategy._check_short_entry_conditions(signals)

            print(f"\nüéØ –ê–ù–ê–õ–ò–ó –£–°–õ–û–í–ò–ô:")
            print(
                f"   Long: {long_score:.1f}/{strategy.MIN_CONDITIONS_REQUIRED} ({'‚úÖ –í–∞–ª–∏–¥–µ–Ω' if long_valid else '‚ùå –ù–µ –≤–∞–ª–∏–¥–µ–Ω'})")
            print(f"   Long –ø—Ä–∏—á–∏–Ω—ã: {long_reasons}")
            print(
                f"   Short: {short_score:.1f}/{strategy.MIN_CONDITIONS_REQUIRED} ({'‚úÖ –í–∞–ª–∏–¥–µ–Ω' if short_valid else '‚ùå –ù–µ –≤–∞–ª–∏–¥–µ–Ω'})")
            print(f"   Short –ø—Ä–∏—á–∏–Ω—ã: {short_reasons}")

            if long_valid or short_valid:
                print("üéâ –°–ò–ì–ù–ê–õ –î–û–õ–ñ–ï–ù –ì–ï–ù–ï–†–ò–†–û–í–ê–¢–¨–°–Ø!")

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –∏–º–µ–Ω–Ω–æ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏–∑–æ–π—Ç–∏
                if long_valid:
                    print(f"   üìà LONG —Å–∏–≥–Ω–∞–ª: {long_score} —É—Å–ª–æ–≤–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
                    print(f"   üí° –ü—Ä–∏—á–∏–Ω—ã: {long_reasons}")
                if short_valid:
                    print(f"   üìâ SHORT —Å–∏–≥–Ω–∞–ª: {short_score} —É—Å–ª–æ–≤–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
                    print(f"   üí° –ü—Ä–∏—á–∏–Ω—ã: {short_reasons}")
            else:
                print("‚ö†Ô∏è –£—Å–ª–æ–≤–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞")
                print(f"   üìä Long: {long_score}/2 —É—Å–ª–æ–≤–∏–π ({'‚úÖ' if long_valid else '‚ùå'})")
                print(f"   üìä Short: {short_score}/2 —É—Å–ª–æ–≤–∏–π ({'‚úÖ' if short_valid else '‚ùå'})")
                print(f"   üí° –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º {strategy.MIN_CONDITIONS_REQUIRED} —É—Å–ª–æ–≤–∏–π")

        else:
            print("‚ùå –°–∏–≥–Ω–∞–ª—ã –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    test_strategy_simple()