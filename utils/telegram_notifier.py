import logging
import os
from datetime import datetime
import asyncio
from typing import Optional, Dict, Any
import aiohttp
from config.trading_config import TradingConfig

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–≤–Ω–∏–∫–∞ —Ç—Ä–µ–π–¥–∏–Ω–≥–∞ python utils/diary_viewer.py


class TelegramNotifier:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram"""

    def __init__(self, token: str, chat_id: str, log_dir: str = "logs/telegram"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª—è—é—â–µ–≥–æ –±–æ—Ç–∞ Telegram

        Args:
            token: –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞
            chat_id: ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
            log_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –ª–æ–≥–æ–≤
        """
        self.token = token
        self.chat_id = chat_id
        self.log_dir = log_dir
        self.base_url = f"https://api.telegram.org/bot{token}"
        self.logger = logging.getLogger(__name__)
        os.makedirs(self.log_dir, exist_ok=True)

    async def send_message(self, message: str, parse_mode: str = 'HTML') -> bool:
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram

        Args:
            message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            parse_mode: –†–µ–∂–∏–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (HTML/Markdown)

        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏
        """
        try:
            async with aiohttp.ClientSession() as session:
                url = f"{self.base_url}/sendMessage"
                payload = {
                    'chat_id': self.chat_id,
                    'text': message,
                    'parse_mode': parse_mode
                }

                async with session.post(url, json=payload) as response:
                    if response.status == 200:
                        self.logger.info("Message sent successfully")
                        return True
                    else:
                        error_text = await response.text()
                        self.logger.error(f"Failed to send message: {error_text}")
                        await self._log_error("send_message", error_text, message)
                        return False

        except Exception as e:
            self.logger.error(f"Error sending message: {e}")
            await self._log_error("send_message", str(e), message)
            return False

    async def send_trade_notification(self, trade_data: Dict[str, Any]) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç–æ—Ä–≥–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏

        Args:
            trade_data: –î–∞–Ω–Ω—ã–µ –æ —Å–¥–µ–ª–∫–µ

        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏
        """
        try:
            message = self._format_trade_message(trade_data)
            return await self.send_message(message)
        except Exception as e:
            self.logger.error(f"Error sending trade notification: {e}")
            await self._log_error("trade_notification", str(e), str(trade_data))
            return False

    async def send_error_notification(self,
                                      error: Exception,
                                      additional_info: Optional[Dict] = None) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ

        Args:
            error: –û–±—ä–µ–∫—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è
            additional_info: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏
        """
        try:
            message = self._format_error_message(error, additional_info)
            return await self.send_message(message, parse_mode='Markdown')
        except Exception as e:
            self.logger.error(f"Error sending error notification: {e}")
            await self._log_error("error_notification", str(e), str(error))
            return False

    async def send_strategy_notification(self,
                                         strategy_data: Dict[str, Any]) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–∏–≥–Ω–∞–ª–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏

        Args:
            strategy_data: –î–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏

        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏
        """
        try:
            message = self._format_strategy_message(strategy_data)
            return await self.send_message(message)
        except Exception as e:
            self.logger.error(f"Error sending strategy notification: {e}")
            await self._log_error("strategy_notification", str(e), str(strategy_data))
            return False

    def _format_trade_message(self, trade_data: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ç–æ—Ä–≥–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        message = (
            f"üîî <b>–¢–æ—Ä–≥–æ–≤–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è</b>\n\n"
            f"üìä –°–∏–º–≤–æ–ª: {trade_data.get('symbol', 'N/A')}\n"
            f"üìà –¢–∏–ø: {trade_data.get('type', 'N/A')}\n"
            f"üí∞ –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {trade_data.get('entry_price', 'N/A')}\n"
            f"üìâ –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {trade_data.get('size', 'N/A')}\n"
        )

        if 'take_profit' in trade_data:
            message += f"üéØ Take Profit: {trade_data['take_profit']}\n"
        if 'stop_loss' in trade_data:
            message += f"üõë Stop Loss: {trade_data['stop_loss']}\n"
        if 'pnl' in trade_data:
            message += f"üíµ P&L: {trade_data['pnl']}\n"

        return message

    def _format_error_message(self,
                              error: Exception,
                              additional_info: Optional[Dict] = None) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ"""
        message = (
            f"‚ö†Ô∏è *–û—à–∏–±–∫–∞*\n\n"
            f"–¢–∏–ø: `{type(error).__name__}`\n"
            f"–°–æ–æ–±—â–µ–Ω–∏–µ: `{str(error)}`\n"
        )

        if additional_info:
            message += "\n*–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*\n"
            for key, value in additional_info.items():
                message += f"`{key}`: {value}\n"

        return message

    def _format_strategy_message(self, strategy_data: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å–∏–≥–Ω–∞–ª–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        message = (
            f"ü§ñ <b>–°–∏–≥–Ω–∞–ª —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏</b>\n\n"
            f"üìä –°–∏–º–≤–æ–ª: {strategy_data.get('symbol', 'N/A')}\n"
            f"üìà –°–∏–≥–Ω–∞–ª: {strategy_data.get('signal', 'N/A')}\n"
            f"üí™ –°–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞: {strategy_data.get('strength', 'N/A')}\n"
        )

        if 'indicators' in strategy_data:
            message += "\nüìä <b>–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã:</b>\n"
            for indicator, value in strategy_data['indicators'].items():
                message += f"{indicator}: {value}\n"

        return message

    async def _log_error(self,
                         error_type: str,
                         error_message: str,
                         additional_data: str) -> None:
        """
        –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ –≤ —Ñ–∞–π–ª

        Args:
            error_type: –¢–∏–ø –æ—à–∏–±–∫–∏
            error_message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            additional_data: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        """
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        log_file = os.path.join(self.log_dir, f"telegram_error_{timestamp}.log")

        try:
            with open(log_file, "w", encoding='utf-8') as f:
                f.write(
                    f"Timestamp: {timestamp}\n"
                    f"Error Type: {error_type}\n"
                    f"Error Message: {error_message}\n"
                    f"Additional Data: {additional_data}\n"
                )
            self.logger.info(f"Error logged to {log_file}")
        except Exception as e:
            self.logger.error(f"Error writing to log file: {e}")


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
"""
async def main():
    notifier = TelegramNotifier(
        token=TradingConfig.TELEGRAM_TOKEN,
        chat_id=TradingConfig.TELEGRAM_CHAT_ID
    )

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–¥–µ–ª–∫–µ
    await notifier.send_trade_notification({
        'symbol': 'ETHUSDT',
        'type': 'LONG',
        'entry_price': 2000,
        'size': 0.1,
        'take_profit': 2100,
        'stop_loss': 1950
    })

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
    try:
        raise ValueError("Test error")
    except Exception as e:
        await notifier.send_error_notification(e, {'additional': 'info'})

if __name__ == "__main__":
    asyncio.run(main())
"""