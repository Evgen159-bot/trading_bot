#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ –±–µ–∑ –∑–∞–≥—Ä—É–∑–∫–∏ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
"""

import os
from datetime import datetime
from pathlib import Path


def quick_log_analysis():
    """–ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ª–æ–≥–æ–≤"""
    print("üîç –ë–´–°–¢–†–´–ô –ê–ù–ê–õ–ò–ó –õ–û–ì–û–í")
    print("=" * 40)

    # –ù–∞–π—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –ª–æ–≥ —Ñ–∞–π–ª
    log_dir = Path("logs")
    if not log_dir.exists():
        print("‚ùå –ü–∞–ø–∫–∞ logs –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    log_files = list(log_dir.glob("trading_*.log"))
    if not log_files:
        print("‚ùå –õ–æ–≥ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return

    latest_log = max(log_files, key=lambda x: x.stat().st_mtime)
    print(f"üìÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º: {latest_log}")

    try:
        with open(latest_log, 'r', encoding='utf-8') as f:
            lines = f.readlines()

        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å—Ç—Ä–æ–∫
        recent_lines = lines[-50:]

        print(f"\nüìä –ü–û–°–õ–ï–î–ù–ò–ï 50 –ó–ê–ü–ò–°–ï–ô:")
        print("-" * 40)

        open_signals = 0
        close_signals = 0
        errors = 0

        for line in recent_lines:
            if 'Strategy result' in line and 'OPEN' in line:
                open_signals += 1
                print(f"üìà {line.strip()}")
            elif 'Strategy result' in line and 'CLOSE' in line:
                close_signals += 1
                print(f"üìâ {line.strip()}")
            elif 'ERROR' in line:
                errors += 1
                print(f"‚ùå {line.strip()}")
            elif 'No action for' in line:
                print(f"‚è∏Ô∏è  {line.strip()}")

        print("-" * 40)
        print(f"üìä –°–í–û–î–ö–ê –ü–û–°–õ–ï–î–ù–ò–• –ó–ê–ü–ò–°–ï–ô:")
        print(f"   üìà OPEN —Å–∏–≥–Ω–∞–ª–æ–≤: {open_signals}")
        print(f"   üìâ CLOSE —Å–∏–≥–Ω–∞–ª–æ–≤: {close_signals}")
        print(f"   ‚ùå –û—à–∏–±–æ–∫: {errors}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏–µ
        if open_signals > 20 and close_signals == 0:
            print(f"\nüö® –ü–†–û–ë–õ–ï–ú–ê: –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ OPEN —Å–∏–≥–Ω–∞–ª–æ–≤ –±–µ–∑ CLOSE!")
            print(f"   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –£–≤–µ–ª–∏—á–∏—Ç—å min_conditions_required")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–∞: {e}")


def check_signal_patterns():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤"""
    print(f"\nüéØ –ê–ù–ê–õ–ò–ó –ü–ê–¢–¢–ï–†–ù–û–í –°–ò–ì–ù–ê–õ–û–í:")

    try:
        log_dir = Path("logs")
        log_files = list(log_dir.glob("trading_*.log"))
        latest_log = max(log_files, key=lambda x: x.stat().st_mtime)

        with open(latest_log, 'r', encoding='utf-8') as f:
            content = f.read()

        # –ü–æ–¥—Å—á–µ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ –ø–∞—Ä–∞–º
        pairs = ['ETHUSDT', 'SOLUSDT', 'BTCUSDT', 'DOGEUSDT']

        for pair in pairs:
            open_count = content.count(f'Strategy result for {pair}: OPEN')
            close_count = content.count(f'Strategy result for {pair}: CLOSE')
            no_action = content.count(f'No action for {pair}')

            print(f"   {pair}: OPEN={open_count}, CLOSE={close_count}, NO_ACTION={no_action}")

            if open_count > 100 and close_count == 0:
                print(f"      üö® {pair}: –ú–Ω–æ–≥–æ OPEN, –Ω–µ—Ç CLOSE - –ø—Ä–æ–±–ª–µ–º–∞ —Å –ª–æ–≥–∏–∫–æ–π!")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {e}")


if __name__ == "__main__":
    quick_log_analysis()
    check_signal_patterns()