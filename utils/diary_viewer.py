"""
–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–Ω–µ–≤–Ω–∏–∫–∞ —Ç—Ä–µ–π–¥–∏–Ω–≥–∞
"""
import json
import os
from datetime import date, datetime, timedelta
from pathlib import Path
from typing import Dict, List, Any
import pandas as pd


class DiaryViewer:
    """–ü—Ä–æ—Å–º–æ—Ç—Ä—â–∏–∫ –¥–Ω–µ–≤–Ω–∏–∫–∞ —Ç—Ä–µ–π–¥–∏–Ω–≥–∞"""
    
    def __init__(self):
        self.diary_dir = Path("data/diary")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–Ω–µ–≤–Ω–∏–∫–∞
        self.logger = self._setup_viewer_logger()
        
    def _setup_viewer_logger(self) -> logging.Logger:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–Ω–µ–≤–Ω–∏–∫–∞"""
        import logging
        
        logger = logging.getLogger("diary_viewer")
        logger.setLevel(logging.INFO)
        
        # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        logger.handlers.clear()
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤ –¥–Ω–µ–≤–Ω–∏–∫–∞
        diary_logs_dir = Path("logs/trading_diary")
        diary_logs_dir.mkdir(parents=True, exist_ok=True)
        
        # –§–∞–π–ª–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        log_file = diary_logs_dir / f"diary_viewer_{datetime.now().strftime('%Y%m%d')}.log"
        file_handler = logging.FileHandler(log_file, encoding='utf-8')
        file_handler.setFormatter(
            logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        )
        logger.addHandler(file_handler)
        
        return logger
        
    def show_today(self) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–Ω–µ–≤–Ω–∏–∫"""
        today = date.today()
        self.logger.info(f"üëÄ –ü–†–û–°–ú–û–¢–† –î–ù–ï–í–ù–ò–ö–ê: –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å ({today.isoformat()})")
        self.show_day(today)
    
    def show_day(self, target_date: date) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–Ω–µ–≤–Ω–∏–∫ –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å"""
        try:
            self.logger.info(f"üëÄ –ü–†–û–°–ú–û–¢–† –î–ù–ï–í–ù–ò–ö–ê: –î–µ–Ω—å {target_date.isoformat()}")
            
            filename = f"diary_{target_date.isoformat()}.json"
            filepath = self.diary_dir / filename
            
            if not filepath.exists():
                self.logger.warning(f"‚ùå –î–Ω–µ–≤–Ω–∏–∫ –∑–∞ {target_date.strftime('%d.%m.%Y')} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                print(f"‚ùå –î–Ω–µ–≤–Ω–∏–∫ –∑–∞ {target_date.strftime('%d.%m.%Y')} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            with open(filepath, 'r', encoding='utf-8') as f:
                day_data = json.load(f)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–Ω–µ
            daily_return = day_data.get('daily_return', 0.0)
            total_trades = day_data.get('daily_stats', {}).get('total_trades', 0)
            win_rate = day_data.get('daily_stats', {}).get('win_rate', 0.0)
            
            self.logger.info(f"üìä –î–ê–ù–ù–´–ï –î–ù–Ø {target_date.strftime('%d.%m.%Y')}:")
            self.logger.info(f"   üí∞ –î–Ω–µ–≤–Ω–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${daily_return:.2f}")
            self.logger.info(f"   üìä –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {total_trades}")
            self.logger.info(f"   üéØ Win Rate: {win_rate:.1f}%")
            
            self._print_day_report(day_data)
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –¥–Ω–µ–≤–Ω–∏–∫–∞: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –¥–Ω–µ–≤–Ω–∏–∫–∞: {e}")
    
    def show_week(self) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–µ–¥–µ–ª—å–Ω—É—é —Å–≤–æ–¥–∫—É"""
        try:
            end_date = date.today()
            start_date = end_date - timedelta(days=7)
            
            self.logger.info(f"üëÄ –ü–†–û–°–ú–û–¢–† –î–ù–ï–í–ù–ò–ö–ê: –ù–µ–¥–µ–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞ ({start_date.isoformat()} - {end_date.isoformat()})")
            
            print("\n" + "="*70)
            print("üìä –ù–ï–î–ï–õ–¨–ù–ê–Ø –°–í–û–î–ö–ê –¢–†–ï–ô–î–ò–ù–ì–ê")
            print("="*70)
            print(f"üìÖ –ü–µ—Ä–∏–æ–¥: {start_date.strftime('%d.%m.%Y')} - {end_date.strftime('%d.%m.%Y')}")
            print("-"*70)
            
            total_return = 0.0
            total_trades = 0
            trading_days = 0
            daily_returns = []
            
            current_date = start_date
            while current_date <= end_date:
                filename = f"diary_{current_date.isoformat()}.json"
                filepath = self.diary_dir / filename
                
                if filepath.exists():
                    with open(filepath, 'r', encoding='utf-8') as f:
                        day_data = json.load(f)
                    
                    daily_return = day_data.get('daily_return', 0.0)
                    trades_count = day_data.get('daily_stats', {}).get('total_trades', 0)
                    
                    total_return += daily_return
                    total_trades += trades_count
                    trading_days += 1
                    daily_returns.append(daily_return)
                    
                    return_emoji = "üìà" if daily_return >= 0 else "üìâ"
                    print(f"{current_date.strftime('%d.%m')}: {return_emoji} ${daily_return:+.2f} | –°–¥–µ–ª–æ–∫: {trades_count}")
                
                current_date += timedelta(days=1)
            
            print("-"*70)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ–¥–µ–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            self.logger.info(f"üìä –ù–ï–î–ï–õ–¨–ù–ê–Ø –°–í–û–î–ö–ê:")
            self.logger.info(f"   üí∞ –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${total_return:.2f}")
            self.logger.info(f"   üìä –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {total_trades}")
            self.logger.info(f"   üìÖ –¢–æ—Ä–≥–æ–≤—ã—Ö –¥–Ω–µ–π: {trading_days}")
            
            print(f"üí∞ –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${total_return:+.2f}")
            print(f"üìä –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {total_trades}")
            print(f"üìÖ –¢–æ—Ä–≥–æ–≤—ã—Ö –¥–Ω–µ–π: {trading_days}")
            
            if trading_days > 0:
                avg_daily = total_return / trading_days
                profitable_days = len([r for r in daily_returns if r > 0])
                win_rate = (profitable_days / trading_days) * 100
                
                self.logger.info(f"   üìà –°—Ä–µ–¥–Ω–∏–π –¥–Ω–µ–≤–Ω–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${avg_daily:.2f}")
                self.logger.info(f"   üéØ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö –¥–Ω–µ–π: {profitable_days}/{trading_days} ({win_rate:.1f}%)")
                
                print(f"üìà –°—Ä–µ–¥–Ω–∏–π –¥–Ω–µ–≤–Ω–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${avg_daily:+.2f}")
                
                profitable_days = len([r for r in daily_returns if r > 0])
                win_rate = (profitable_days / trading_days) * 100
                print(f"üéØ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö –¥–Ω–µ–π: {profitable_days}/{trading_days} ({win_rate:.1f}%)")
            
            print("="*70)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–¥–µ–ª—å–Ω–æ–π —Å–≤–æ–¥–∫–∏: {e}")
    
    def _print_day_report(self, day_data: Dict[str, Any]) -> None:
        """–ü–µ—á–∞—Ç—å –¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        try:
            date_str = datetime.fromisoformat(day_data['date']).strftime('%d.%m.%Y')
            
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –æ—Ç—á–µ—Ç–∞
            self.logger.info(f"üìã –ì–ï–ù–ï–†–ê–¶–ò–Ø –û–¢–ß–ï–¢–ê –ó–ê {date_str}")
            
            print("\n" + "="*60)
            print(f"üìî –î–ù–ï–í–ù–ò–ö –¢–†–ï–ô–î–ò–ù–ì–ê - {date_str}")
            print("="*60)
            
            # –í—Ä–µ–º—è —Å–µ—Å—Å–∏–∏
            if day_data.get('session_start'):
                start_time = datetime.fromisoformat(day_data['session_start']).strftime('%H:%M')
                end_time = "–∞–∫—Ç–∏–≤–Ω–∞"
                if day_data.get('session_end'):
                    end_time = datetime.fromisoformat(day_data['session_end']).strftime('%H:%M')
                print(f"‚è∞ –í—Ä–µ–º—è —Å–µ—Å—Å–∏–∏: {start_time} - {end_time}")
            
            # –ë–∞–ª–∞–Ω—Å
            start_balance = day_data.get('start_balance', 0.0)
            end_balance = day_data.get('end_balance', day_data.get('current_balance', 0.0))
            daily_return = day_data.get('daily_return', end_balance - start_balance)
            return_pct = day_data.get('daily_return_pct', 0.0)
            
            print(f"üí∞ –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${start_balance:.2f}")
            print(f"üí∞ –ö–æ–Ω–µ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${end_balance:.2f}")
            
            return_emoji = "üìà" if daily_return >= 0 else "üìâ"
            print(f"{return_emoji} –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–Ω—è: ${daily_return:+.2f} ({return_pct:+.2f}%)")
            
            print("-"*60)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–¥–µ–ª–æ–∫
            stats = day_data.get('daily_stats', {})
            total_trades = stats.get('total_trades', 0)
            
            if total_trades > 0:
                print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–î–ï–õ–û–ö:")
                print(f"   –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {total_trades}")
                print(f"   –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {stats.get('winning_trades', 0)} ({stats.get('win_rate', 0):.1f}%)")
                print(f"   –£–±—ã—Ç–æ—á–Ω—ã—Ö: {stats.get('losing_trades', 0)}")
                print(f"   –û–±—â–∏–π P&L: ${stats.get('total_pnl', 0):.2f}")
                print(f"   –ö–æ–º–∏—Å—Å–∏–∏: ${stats.get('total_fees', 0):.2f}")
                
                if stats.get('max_profit', 0) > 0:
                    print(f"   –õ—É—á—à–∞—è —Å–¥–µ–ª–∫–∞: ${stats.get('max_profit', 0):.2f}")
                if stats.get('max_loss', 0) < 0:
                    print(f"   –•—É–¥—à–∞—è —Å–¥–µ–ª–∫–∞: ${stats.get('max_loss', 0):.2f}")
                
                print("-"*60)
            
            # –î–µ—Ç–∞–ª–∏ —Å–¥–µ–ª–æ–∫
            trades = day_data.get('trades', [])
            if trades:
                print("üìà –î–ï–¢–ê–õ–ò –°–î–ï–õ–û–ö:")
                for i, trade in enumerate(trades, 1):
                    pnl_emoji = "üíö" if trade.get('net_pnl', 0) > 0 else "‚ù§Ô∏è"
                    open_time = datetime.fromisoformat(trade['open_time']).strftime('%H:%M')
                    close_time = datetime.fromisoformat(trade['close_time']).strftime('%H:%M')
                    
                    print(f"   {i}. {trade['symbol']} {trade['direction']}")
                    print(f"      ‚è∞ {open_time} - {close_time} ({trade.get('duration', 'N/A')})")
                    print(f"      üíµ ${trade['entry_price']:.4f} ‚Üí ${trade['exit_price']:.4f}")
                    print(f"      {pnl_emoji} P&L: ${trade.get('net_pnl', 0):.2f} | ROI: {trade.get('roi_pct', 0):+.2f}%")
                    print(f"      üìù –ü—Ä–∏—á–∏–Ω–∞: {trade.get('close_reason', 'N/A')}")
                    print()
            
            # –û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
            positions = day_data.get('positions', [])
            open_positions = [p for p in positions if p.get('status') == 'OPEN']
            
            if open_positions:
                print("üîÑ –û–¢–ö–†–´–¢–´–ï –ü–û–ó–ò–¶–ò–ò:")
                for pos in open_positions:
                    open_time = datetime.fromisoformat(pos['open_time']).strftime('%H:%M')
                    print(f"   ‚Ä¢ {pos['symbol']} {pos['direction']} | "
                          f"–†–∞–∑–º–µ—Ä: {pos['size']} | "
                          f"–¶–µ–Ω–∞: ${pos['entry_price']:.4f} | "
                          f"–í—Ä–µ–º—è: {open_time}")
                print()
            
            print("="*60)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—á–∞—Ç–∏ –æ—Ç—á–µ—Ç–∞: {e}")
    
    def list_available_days(self, days: int = 30) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–Ω–∏ –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ"""
        try:
            self.logger.info(f"üëÄ –ü–†–û–°–ú–û–¢–† –î–ù–ï–í–ù–ò–ö–ê: –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–Ω–µ–π (–ø–æ—Å–ª–µ–¥–Ω–∏–µ {days} –¥–Ω–µ–π)")
            
            print("\nüìÖ –î–û–°–¢–£–ü–ù–´–ï –î–ù–ò –í –î–ù–ï–í–ù–ò–ö–ï:")
            print("-" * 40)
            
            end_date = date.today()
            start_date = end_date - timedelta(days=days)
            
            available_days = []
            current_date = start_date
            
            while current_date <= end_date:
                filename = f"diary_{current_date.isoformat()}.json"
                filepath = self.diary_dir / filename
                
                if filepath.exists():
                    available_days.append(current_date)
                
                current_date += timedelta(days=1)
            
            if available_days:
                for day in sorted(available_days, reverse=True):
                    print(f"üìî {day.strftime('%d.%m.%Y (%A)')}")
                
                self.logger.info(f"üìÖ –ù–∞–π–¥–µ–Ω–æ {len(available_days)} –¥–Ω–µ–π —Å –∑–∞–ø–∏—Å—è–º–∏")
            else:
                self.logger.warning("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ")
                print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ")
            
            print("-" * 40)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –¥–Ω–µ–π: {e}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–Ω–µ–≤–Ω–∏–∫–∞"""
    viewer = DiaryViewer()
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    viewer.logger.info("üöÄ –ó–ê–ü–£–°–ö –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–û–ì–û –ü–†–û–°–ú–û–¢–†–ê –î–ù–ï–í–ù–ò–ö–ê")
    
    while True:
        print("\nüìî –ü–†–û–°–ú–û–¢–† –î–ù–ï–í–ù–ò–ö–ê –¢–†–ï–ô–î–ò–ù–ì–ê")
        print("1. –ü–æ–∫–∞–∑–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è")
        print("2. –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å")
        print("3. –ù–µ–¥–µ–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞")
        print("4. –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–Ω–µ–π")
        print("0. –í—ã—Ö–æ–¥")
        
        choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é: ").strip()
        
        if choice == "1":
            viewer.logger.info("üë§ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨: –í—ã–±—Ä–∞–ª –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è")
            viewer.show_today()
        elif choice == "2":
            date_str = input("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É (YYYY-MM-DD): ").strip()
            try:
                target_date = datetime.strptime(date_str, "%Y-%m-%d").date()
                viewer.logger.info(f"üë§ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨: –í—ã–±—Ä–∞–ª –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–Ω—è {target_date.isoformat()}")
                viewer.show_day(target_date)
            except ValueError:
                viewer.logger.warning(f"‚ùå –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: {date_str}")
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã")
        elif choice == "3":
            viewer.logger.info("üë§ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨: –í—ã–±—Ä–∞–ª –Ω–µ–¥–µ–ª—å–Ω—É—é —Å–≤–æ–¥–∫—É")
            viewer.show_week()
        elif choice == "4":
            viewer.logger.info("üë§ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨: –í—ã–±—Ä–∞–ª —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–Ω–µ–π")
            viewer.list_available_days()
        elif choice == "0":
            viewer.logger.info("üë§ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨: –ó–∞–≤–µ—Ä—à–∏–ª –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–Ω–µ–≤–Ω–∏–∫–∞")
            break
        else:
            viewer.logger.warning(f"‚ùå –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨: –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä: {choice}")
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
    
    viewer.logger.info("üèÅ –ó–ê–í–ï–†–®–ï–ù–ò–ï –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–û–ì–û –ü–†–û–°–ú–û–¢–†–ê –î–ù–ï–í–ù–ò–ö–ê")


if __name__ == "__main__":
    main()
