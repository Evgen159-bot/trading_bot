#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ª–æ–≥–æ–≤ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º –∏ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
"""

import re
from datetime import datetime
from collections import Counter
from pathlib import Path


class LogAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ª–æ–≥–æ–≤ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞"""

    def __init__(self, log_file: str = None):
        if log_file is None:
            log_file = f"logs/trading_{datetime.now().strftime('%Y%m%d')}.log"
        self.log_file = Path(log_file)

    def analyze_logs(self):
        """–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤"""
        if not self.log_file.exists():
            print(f"‚ùå –õ–æ–≥ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.log_file}")
            return

        print("üìä –ê–ù–ê–õ–ò–ó –õ–û–ì–û–í –¢–û–†–ì–û–í–û–ì–û –ë–û–¢–ê")
        print("=" * 50)

        with open(self.log_file, 'r', encoding='utf-8') as f:
            lines = f.readlines()

        # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self._analyze_basic_stats(lines)

        # –ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫
        self._analyze_errors(lines)

        # –ê–Ω–∞–ª–∏–∑ —Å–∏–≥–Ω–∞–ª–æ–≤
        self._analyze_signals(lines)

        # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        self._analyze_performance(lines)

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        self._provide_recommendations(lines)

    def _analyze_basic_stats(self, lines):
        """–ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
        print("\nüìà –ë–ê–ó–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")

        total_lines = len(lines)
        info_lines = len([l for l in lines if ' - INFO - ' in l])
        error_lines = len([l for l in lines if ' - ERROR - ' in l])
        warning_lines = len([l for l in lines if ' - WARNING - ' in l])

        print(f"   –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total_lines}")
        print(f"   INFO: {info_lines}")
        print(f"   ERROR: {error_lines}")
        print(f"   WARNING: {warning_lines}")

        # –ê–Ω–∞–ª–∏–∑ —Ü–∏–∫–ª–æ–≤
        cycle_starts = len([l for l in lines if 'Trading cycle started' in l])
        processed_pairs = len([l for l in lines if 'Processed 4/4 pairs' in l])

        print(f"   –¢–æ—Ä–≥–æ–≤—ã—Ö —Ü–∏–∫–ª–æ–≤: {cycle_starts}")
        print(f"   –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤: {processed_pairs}")

        if processed_pairs > 0:
            # –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            times = []
            for line in lines:
                if 'Processed 4/4 pairs in' in line:
                    match = re.search(r'in (\d+\.\d+)s', line)
                    if match:
                        times.append(float(match.group(1)))

            if times:
                avg_time = sum(times) / len(times)
                print(f"   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Ü–∏–∫–ª–∞: {avg_time:.2f}—Å")
                print(f"   –ú–∏–Ω/–ú–∞–∫—Å –≤—Ä–µ–º—è: {min(times):.2f}—Å / {max(times):.2f}—Å")

    def _analyze_errors(self, lines):
        """–ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫"""
        print("\nüö® –ê–ù–ê–õ–ò–ó –û–®–ò–ë–û–ö:")

        errors = [l for l in lines if ' - ERROR - ' in l]

        if not errors:
            print("   ‚úÖ –û—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return

        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –æ—à–∏–±–æ–∫
        error_types = Counter()
        for error in errors:
            if 'account balance' in error.lower():
                error_types['Account Balance Error'] += 1
            elif 'api' in error.lower():
                error_types['API Error'] += 1
            elif 'connection' in error.lower():
                error_types['Connection Error'] += 1
            else:
                error_types['Other Error'] += 1

        print(f"   –í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: {len(errors)}")
        for error_type, count in error_types.most_common():
            print(f"   {error_type}: {count}")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏
        print(f"\n   üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏:")
        for error in errors[-3:]:
            timestamp = error.split(' - ')[0]
            message = error.split(' - ERROR - ')[1].strip()
            print(f"      {timestamp}: {message}")

    def _analyze_signals(self, lines):
        """–ê–Ω–∞–ª–∏–∑ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
        print("\nüéØ –ê–ù–ê–õ–ò–ó –¢–û–†–ì–û–í–´–• –°–ò–ì–ù–ê–õ–û–í:")

        # –ü–æ–¥—Å—á–µ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤ OPEN
        open_signals = [l for l in lines if 'Strategy result for' in l and ': OPEN' in l]

        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –ø–∞—Ä–∞–º
        pair_signals = Counter()
        for signal in open_signals:
            for pair in ['ETHUSDT', 'SOLUSDT', 'BTCUSDT', 'DOGEUSDT']:
                if pair in signal:
                    pair_signals[pair] += 1
                    break

        print(f"   –í—Å–µ–≥–æ OPEN —Å–∏–≥–Ω–∞–ª–æ–≤: {len(open_signals)}")

        if pair_signals:
            print(f"   –ü–æ –ø–∞—Ä–∞–º:")
            for pair, count in pair_signals.most_common():
                print(f"      {pair}: {count} —Å–∏–≥–Ω–∞–ª–æ–≤")
        else:
            print("   ‚ùå –°–∏–≥–Ω–∞–ª—ã OPEN –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

        # –ê–Ω–∞–ª–∏–∑ —á–∞—Å—Ç–æ—Ç—ã —Å–∏–≥–Ω–∞–ª–æ–≤
        if open_signals:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
            timestamps = []
            for signal in open_signals:
                time_str = signal.split(' - ')[0]
                try:
                    timestamp = datetime.strptime(time_str, '%Y-%m-%d %H:%M:%S')
                    timestamps.append(timestamp)
                except:
                    pass

            if len(timestamps) > 1:
                time_diff = (timestamps[-1] - timestamps[0]).total_seconds()
                frequency = len(timestamps) / (time_diff / 60)  # —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ –º–∏–Ω—É—Ç—É
                print(f"   –ß–∞—Å—Ç–æ—Ç–∞ —Å–∏–≥–Ω–∞–ª–æ–≤: {frequency:.2f} —Å–∏–≥–Ω–∞–ª–æ–≤/–º–∏–Ω")

    def _analyze_performance(self, lines):
        """–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        print("\n‚ö° –ê–ù–ê–õ–ò–ó –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò:")

        # –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ü–∏–∫–ª–æ–≤
        execution_times = []
        for line in lines:
            if 'Processed 4/4 pairs in' in line:
                match = re.search(r'in (\d+\.\d+)s', line)
                if match:
                    execution_times.append(float(match.group(1)))

        if execution_times:
            avg_time = sum(execution_times) / len(execution_times)
            print(f"   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Ü–∏–∫–ª–∞: {avg_time:.2f}—Å")

            # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            fast_cycles = len([t for t in execution_times if t < 10])
            slow_cycles = len([t for t in execution_times if t > 30])

            print(f"   –ë—ã—Å—Ç—Ä—ã–µ —Ü–∏–∫–ª—ã (<10—Å): {fast_cycles}")
            print(f"   –ú–µ–¥–ª–µ–Ω–Ω—ã–µ —Ü–∏–∫–ª—ã (>30—Å): {slow_cycles}")

            if slow_cycles > fast_cycles:
                print("   ‚ö†Ô∏è –ú–Ω–æ–≥–æ –º–µ–¥–ª–µ–Ω–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤ - –≤–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å API")

        # –ê–Ω–∞–ª–∏–∑ –±–∞–ª–∞–Ω—Å–∞
        balance_lines = [l for l in lines if 'Account balance:' in l]
        if balance_lines:
            print(f"   –ü—Ä–æ–≤–µ—Ä–æ–∫ –±–∞–ª–∞–Ω—Å–∞: {len(balance_lines)}")
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –±–∞–ª–∞–Ω—Å
            last_balance_line = balance_lines[-1]
            match = re.search(r'\$(\d+\.\d+)', last_balance_line)
            if match:
                balance = float(match.group(1))
                print(f"   –ü–æ—Å–ª–µ–¥–Ω–∏–π –±–∞–ª–∞–Ω—Å: ${balance:.2f}")

    def _provide_recommendations(self, lines):
        """–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é"""
        print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –£–õ–£–ß–®–ï–ù–ò–Æ:")

        errors = [l for l in lines if ' - ERROR - ' in l]
        open_signals = [l for l in lines if 'Strategy result for' in l and ': OPEN' in l]

        # –ü—Ä–æ–±–ª–µ–º–∞ —Å –±–∞–ª–∞–Ω—Å–æ–º
        balance_errors = [e for e in errors if 'account balance' in e.lower()]
        if balance_errors:
            print("   üîß –ò—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:")
            print("      - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å API –∫–ª—é—á–∏")
            print("      - –î–æ–±–∞–≤–∏—Ç—å fallback –¥–ª—è testnet")

        # –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤ OPEN
        if len(open_signals) > 50:
            print("   ‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ OPEN —Å–∏–≥–Ω–∞–ª–æ–≤:")
            print("      - –£–≤–µ–ª–∏—á–∏—Ç—å min_conditions_required")
            print("      - –î–æ–±–∞–≤–∏—Ç—å cooldown –º–µ–∂–¥—É —Å–∏–≥–Ω–∞–ª–∞–º–∏")
            print("      - –£–∂–µ—Å—Ç–æ—á–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã")

        # –ù–µ—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫
        close_signals = [l for l in lines if 'Strategy result for' in l and ': CLOSE' in l]
        if len(open_signals) > 0 and len(close_signals) == 0:
            print("   üéØ –ú–Ω–æ–≥–æ OPEN, –Ω–æ –Ω–µ—Ç CLOSE —Å–∏–≥–Ω–∞–ª–æ–≤:")
            print("      - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏–∫—É –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–π")
            print("      - –î–æ–±–∞–≤–∏—Ç—å —Ç–∞–π–º–∞—É—Ç—ã –¥–ª—è –ø–æ–∑–∏—Ü–∏–π")
            print("      - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Å–ª–æ–≤–∏—è –≤—ã—Ö–æ–¥–∞")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    analyzer = LogAnalyzer()
    analyzer.analyze_logs()


if __name__ == "__main__":
    main()