#!/usr/bin/env python3
"""
–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –æ—Ç–ª–∞–¥–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
"""

import sys
import logging
from datetime import datetime, timedelta
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent.parent))

from config_loader import load_user_configuration
from modules.data_fetcher import DataFetcher
from modules.market_analyzer import MarketAnalyzer
from modules.risk_manager import RiskManager
from modules.order_manager import OrderManager
from modules.position_manager import PositionManager
from pybit.unified_trading import HTTP


class StrategyDebugTool:
    """–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –æ—Ç–ª–∞–¥–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""

    def __init__(self):
        self.setup_logging()
        self.logger = logging.getLogger(__name__)

    def setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        logging.basicConfig(
            level=logging.DEBUG,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            handlers=[
                logging.StreamHandler(sys.stdout),
                logging.FileHandler('strategy_debug.log', encoding='utf-8')
            ]
        )

    def debug_signal_generation(self, symbol: str = 'ETHUSDT'):
        """–î–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        try:
            print(f"üîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –û–¢–õ–ê–î–ö–ê –°–ò–ì–ù–ê–õ–û–í –î–õ–Ø {symbol}")
            print("=" * 60)

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            config_loader = load_user_configuration()

            # –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            data_fetcher = DataFetcher()
            market_analyzer = MarketAnalyzer(data_fetcher)

            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            api_client = HTTP(
                testnet=True,
                api_key="test_key",
                api_secret="test_secret"
            )

            risk_manager = RiskManager()
            order_manager = OrderManager(api_client)
            position_manager = PositionManager(risk_manager, order_manager)

            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
            strategy = config_loader.create_strategy(market_analyzer, position_manager)
            if not strategy:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é")
                return

            print(f"‚úÖ –°—Ç—Ä–∞—Ç–µ–≥–∏—è —Å–æ–∑–¥–∞–Ω–∞: {strategy.name}")

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            print(f"\nüìä –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}...")
            end_time = datetime.now()
            start_time = end_time - timedelta(days=1)

            df = data_fetcher.get_kline(
                symbol=symbol,
                interval='5',
                start_time=int(start_time.timestamp()),
                end_time=int(end_time.timestamp())
            )

            if df is None or len(df) == 0:
                print(f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
                return

            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(df)} —Å–≤–µ—á–µ–π")
            print(f"üìà –¶–µ–Ω–∞: ${df['close'].iloc[-1]:.4f}")
            print(f"üìä –û–±—ä–µ–º: {df['volume'].iloc[-1]:,.0f}")

            # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–∏–≥–Ω–∞–ª–æ–≤
            print(f"\nüéØ –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –°–ò–ì–ù–ê–õ–û–í:")

            if hasattr(strategy, 'generate_signals'):
                signals = strategy.generate_signals(df)

                if signals:
                    print(f"‚úÖ –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã:")
                    print(f"   RSI: {signals.get('rsi', 0):.1f}")
                    print(f"   MACD: {signals.get('macd', 0):.6f}")
                    print(f"   MACD Signal: {signals.get('macd_signal', 0):.6f}")
                    print(f"   EMA Fast: {signals.get('ema_fast', 0):.2f}")
                    print(f"   EMA Slow: {signals.get('ema_slow', 0):.2f}")
                    print(f"   Volume Ratio: {signals.get('volume_ratio', 0):.2f}")
                    print(f"   BB Upper: {signals.get('bb_upper', 0):.2f}")
                    print(f"   BB Lower: {signals.get('bb_lower', 0):.2f}")
                    print(f"   Stoch K: {signals.get('stoch_k', 0):.1f}")
                    print(f"   Stoch D: {signals.get('stoch_d', 0):.1f}")

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –≤—Ö–æ–¥–∞
                    print(f"\nüîç –ê–ù–ê–õ–ò–ó –£–°–õ–û–í–ò–ô –í–•–û–î–ê:")

                    if hasattr(strategy, '_check_long_entry_conditions'):
                        long_valid, long_score, long_reasons = strategy._check_long_entry_conditions(signals)
                        print(f"   üìà LONG: {long_score}/{strategy.MIN_CONDITIONS_REQUIRED} —É—Å–ª–æ–≤–∏–π")
                        print(f"      –í–∞–ª–∏–¥–Ω–æ—Å—Ç—å: {'‚úÖ –î–ê' if long_valid else '‚ùå –ù–ï–¢'}")
                        print(f"      –ü—Ä–∏—á–∏–Ω—ã: {long_reasons}")

                        # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–≥–æ —É—Å–ª–æ–≤–∏—è
                        self._analyze_long_conditions_detailed(strategy, signals)

                    if hasattr(strategy, '_check_short_entry_conditions'):
                        short_valid, short_score, short_reasons = strategy._check_short_entry_conditions(signals)
                        print(f"   üìâ SHORT: {short_score}/{strategy.MIN_CONDITIONS_REQUIRED} —É—Å–ª–æ–≤–∏–π")
                        print(f"      –í–∞–ª–∏–¥–Ω–æ—Å—Ç—å: {'‚úÖ –î–ê' if short_valid else '‚ùå –ù–ï–¢'}")
                        print(f"      –ü—Ä–∏—á–∏–Ω—ã: {short_reasons}")

                        # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–≥–æ —É—Å–ª–æ–≤–∏—è
                        self._analyze_short_conditions_detailed(strategy, signals)

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º cooldown
                    if hasattr(strategy, '_is_signal_cooldown_active'):
                        cooldown_active = strategy._is_signal_cooldown_active()
                        print(f"\n‚è∞ Signal Cooldown: {'üî¥ –ê–ö–¢–ò–í–ï–ù' if cooldown_active else '‚úÖ –ù–ï–ê–ö–¢–ò–í–ï–ù'}")

                        if cooldown_active and hasattr(strategy, 'last_signal_time'):
                            time_since = (datetime.now() - strategy.last_signal_time).total_seconds()
                            print(f"   –í—Ä–µ–º—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–∏–≥–Ω–∞–ª–∞: {time_since:.0f}—Å")
                            print(f"   –¢—Ä–µ–±—É–µ—Ç—Å—è cooldown: {strategy.SIGNAL_COOLDOWN}—Å")

                    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
                    print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
                    self._provide_optimization_recommendations(strategy, signals, long_valid, short_valid)

                else:
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã")
            else:
                print("‚ö†Ô∏è –ú–µ—Ç–æ–¥ generate_signals –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏: {e}")
            import traceback
            traceback.print_exc()

    def _analyze_long_conditions_detailed(self, strategy, signals):
        """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —É—Å–ª–æ–≤–∏–π –¥–ª—è –ª–æ–Ω–≥–∞"""
        print(f"\n      üìä –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó LONG CONDITIONS:")

        # RSI
        if strategy.RSI_ENABLED:
            rsi = signals.get('rsi', 50)
            rsi_prev = signals.get('rsi_prev', 50)
            rsi_condition = rsi < strategy.RSI_OVERSOLD_UPPER or (rsi > rsi_prev and rsi < 50)
            print(f"         RSI: {rsi:.1f} ({'‚úÖ' if rsi_condition else '‚ùå'}) - –ü–æ—Ä–æ–≥: <{strategy.RSI_OVERSOLD_UPPER}")

        # MACD
        if strategy.MACD_ENABLED:
            macd = signals.get('macd', 0)
            macd_signal = signals.get('macd_signal', 0)
            macd_condition = macd > macd_signal
            print(f"         MACD: {macd:.6f} vs {macd_signal:.6f} ({'‚úÖ' if macd_condition else '‚ùå'})")

        # Volume
        if strategy.VOLUME_ENABLED:
            volume_ratio = signals.get('volume_ratio', 0)
            volume_condition = volume_ratio > strategy.MIN_VOLUME_RATIO
            print(
                f"         Volume: {volume_ratio:.2f} ({'‚úÖ' if volume_condition else '‚ùå'}) - –ü–æ—Ä–æ–≥: >{strategy.MIN_VOLUME_RATIO}")

    def _analyze_short_conditions_detailed(self, strategy, signals):
        """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —É—Å–ª–æ–≤–∏–π –¥–ª—è —à–æ—Ä—Ç–∞"""
        print(f"\n      üìä –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó SHORT CONDITIONS:")

        # RSI
        if strategy.RSI_ENABLED:
            rsi = signals.get('rsi', 50)
            rsi_prev = signals.get('rsi_prev', 50)
            rsi_condition = rsi > strategy.RSI_OVERBOUGHT_LOWER or (rsi < rsi_prev and rsi > 50)
            print(
                f"         RSI: {rsi:.1f} ({'‚úÖ' if rsi_condition else '‚ùå'}) - –ü–æ—Ä–æ–≥: >{strategy.RSI_OVERBOUGHT_LOWER}")

        # MACD
        if strategy.MACD_ENABLED:
            macd = signals.get('macd', 0)
            macd_signal = signals.get('macd_signal', 0)
            macd_condition = macd < macd_signal
            print(f"         MACD: {macd:.6f} vs {macd_signal:.6f} ({'‚úÖ' if macd_condition else '‚ùå'})")

        # Volume
        if strategy.VOLUME_ENABLED:
            volume_ratio = signals.get('volume_ratio', 0)
            volume_condition = volume_ratio > strategy.MIN_VOLUME_RATIO
            print(
                f"         Volume: {volume_ratio:.2f} ({'‚úÖ' if volume_condition else '‚ùå'}) - –ü–æ—Ä–æ–≥: >{strategy.MIN_VOLUME_RATIO}")

    def _provide_optimization_recommendations(self, strategy, signals, long_valid, short_valid):
        """–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        if not long_valid and not short_valid:
            print("   üîß –î–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–∏–≥–Ω–∞–ª–æ–≤:")
            print("      - –°–Ω–∏–∑—å—Ç–µ min_conditions_required –¥–æ 1")
            print("      - –£–≤–µ–ª–∏—á—å—Ç–µ oversold_upper –¥–æ 50")
            print("      - –°–Ω–∏–∑—å—Ç–µ overbought_lower –¥–æ 50")
            print("      - –°–Ω–∏–∑—å—Ç–µ min_ratio –¥–æ 0.8")

        volume_ratio = signals.get('volume_ratio', 0)
        if volume_ratio < strategy.MIN_VOLUME_RATIO:
            print(f"   üìä –û–±—ä–µ–º —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∏–π: {volume_ratio:.2f} < {strategy.MIN_VOLUME_RATIO}")
            print(f"      –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: —Å–Ω–∏–∑–∏—Ç—å min_ratio –¥–æ {max(0.5, volume_ratio * 0.8):.1f}")

        rsi = signals.get('rsi', 50)
        if 45 < rsi < 55:
            print(f"   üìà RSI –≤ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–π –∑–æ–Ω–µ: {rsi:.1f}")
            print("      –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: —Ä–∞—Å—à–∏—Ä–∏—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω—ã RSI –¥–ª—è –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–π –∑–æ–Ω—ã")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ª–∞–¥–∫–∏"""
    debugger = StrategyDebugTool()

    if len(sys.argv) > 1:
        symbol = sys.argv[1]
        debugger.debug_signal_generation(symbol)
    else:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä—ã
        from user_config import UserConfig
        enabled_pairs = UserConfig.get_enabled_pairs()

        for symbol in enabled_pairs:
            debugger.debug_signal_generation(symbol)
            print("\n" + "=" * 60 + "\n")


if __name__ == "__main__":
    main()