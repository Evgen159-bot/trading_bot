import logging
from typing import Dict, Any, Optional
from datetime import datetime
from config.trading_config import TradingConfig
from pybit.unified_trading import HTTP
import time


class OrderManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã–º–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏"""

    def __init__(self, client: HTTP):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –æ—Ä–¥–µ—Ä–æ–≤"""
        self.client = client
        self.logger = logging.getLogger(__name__)
        self.open_orders = {}  # –°–ª–æ–≤–∞—Ä—å –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
        self.order_history = []  # –ò—Å—Ç–æ—Ä–∏—è –æ—Ä–¥–µ—Ä–æ–≤
        self.rate_limit_delay = 1.0  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        self.last_request_time = 0

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
        self.is_testnet = getattr(client, 'testnet', True)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        self.logger.setLevel(logging.INFO)

        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        try:
            import os
            os.makedirs('logs', exist_ok=True)
        except Exception:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å logs, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ —Ñ–∞–π–ª–æ–≤–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            pass

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–∞–π–ª–∞ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if not self.logger.handlers:
            handler = logging.FileHandler('logs/orders.log', encoding='utf-8')
            handler.setFormatter(logging.Formatter('%(asctime)s - %(levelname)s - %(message)s'))
            self.logger.addHandler(handler)

        self.logger.info(f"OrderManager initialized successfully (testnet: {self.is_testnet})")

    def _rate_limit_check(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ rate limit - –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏"""
        current_time = time.time()
        time_since_last = current_time - self.last_request_time

        if time_since_last < self.rate_limit_delay:
            sleep_time = self.rate_limit_delay - time_since_last
            time.sleep(sleep_time)

        self.last_request_time = time.time()

    def place_order(self, symbol: str, side: str, quantity: float,
                    price: float = None, stop_loss: float = None,
                    take_profit: float = None) -> Optional[Dict[str, Any]]:
        """–†–∞–∑–º–µ—â–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ—Ä–¥–µ—Ä–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π TESTNET —Å–∏–º—É–ª—è—Ü–∏–∏"""
        try:
            self.logger.info(f"üîÑ ATTEMPTING TO PLACE ORDER for {symbol}")
            self.logger.info(f"   Symbol: {symbol}")
            self.logger.info(f"   Side: {side}")
            self.logger.info(f"   Quantity: {quantity}")
            self.logger.info(f"   Price: {price}")
            self.logger.info(f"   Stop Loss: {stop_loss}")
            self.logger.info(f"   Take Profit: {take_profit}")
            self.logger.info(f"   Testnet Mode: {self.is_testnet}")

            # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            if quantity <= 0:
                self.logger.error(f"Invalid quantity: {quantity}")
                return {
                    'success': False,
                    'error': f'Invalid quantity: {quantity}'
                }

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–º–≤–æ–ª–∞
            if not symbol or len(symbol) < 6:
                self.logger.error(f"Invalid symbol: {symbol}")
                return {
                    'success': False,
                    'error': f'Invalid symbol: {symbol}'
                }

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            if side not in ['BUY', 'SELL']:
                self.logger.error(f"Invalid side: {side}")
                return {
                    'success': False,
                    'error': f'Invalid side: {side}'
                }

            self._rate_limit_check()

            # –í TESTNET —Ä–µ–∂–∏–º–µ —Å–∏–º—É–ª–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ
            if self.is_testnet:
                self.logger.info(f"üß™ TESTNET MODE: Simulating order placement for {symbol}")

                # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏
                try:
                    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Ü–µ–Ω—É —á–µ—Ä–µ–∑ API
                    from modules.data_fetcher import DataFetcher
                    df = DataFetcher()
                    real_price = df.get_current_price(symbol)

                    if real_price and real_price > 0:
                        price = real_price
                        self.logger.info(f"   –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Ü–µ–Ω—É: ${price:.4f}")
                    else:
                        # Fallback —Ü–µ–Ω—ã
                        fallback_prices = {
                            'ETHUSDT': 2500.0,
                            'BTCUSDT': 58000.0,
                            'SOLUSDT': 140.0,
                            'XRPUSDT': 0.55
                        }
                        price = fallback_prices.get(symbol, 100.0)
                        self.logger.info(f"   –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback —Ü–µ–Ω—É: ${price:.4f}")

                    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–µ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ –¥–ª—è —Ä–µ–∞–ª–∏–∑–º–∞
                    import random
                    slippage = random.uniform(0.0005, 0.002)  # 0.05%-0.2% –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ
                    if side == 'BUY':
                        price *= (1 + slippage)
                    else:
                        price *= (1 - slippage)

                    self.logger.info(f"   –¶–µ–Ω–∞ —Å –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ–º: ${price:.4f}")

                except Exception as e:
                    self.logger.warning(f"Could not get real price, using fallback: {e}")
                    fallback_prices = {
                        'ETHUSDT': 2500.0,
                        'BTCUSDT': 58000.0,
                        'SOLUSDT': 140.0,
                        'XRPUSDT': 0.55
                    }
                    price = fallback_prices.get(symbol, 100.0)

                # –°–æ–∑–¥–∞–µ–º —Å–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
                order_id = f"TESTNET_{symbol}_{int(datetime.now().timestamp())}"

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ä–¥–µ—Ä–µ
                order_info = {
                    'order_id': order_id,
                    'symbol': symbol,
                    'side': side,
                    'quantity': quantity,
                    'price': price,
                    'order_type': "Market",
                    'stop_loss': stop_loss,
                    'take_profit': take_profit,
                    'status': 'FILLED',  # –í testnet —Å—Ä–∞–∑—É –∏—Å–ø–æ–ª–Ω—è–µ–º
                    'timestamp': datetime.now().isoformat(),
                    'simulated': True
                }

                self.open_orders[order_id] = order_info
                self.order_history.append(order_info.copy())

                self.logger.info(f"‚úÖ TESTNET ORDER PLACED SUCCESSFULLY: {order_id}")
                self.logger.info(f"   Order ID: {order_id}")
                self.logger.info(f"   Status: SIMULATED_FILLED")
                self.logger.info(f"   Price used: ${price:.4f}")
                self.logger.info(f"   Quantity: {quantity}")

                return {
                    'success': True,
                    'order_id': order_id,
                    'symbol': symbol,
                    'side': side,
                    'quantity': quantity,
                    'price': price,
                    'simulated': True
                }

            # –†–µ–∞–ª—å–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ (–¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞)
            else:
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–∏–º–≤–æ–ª–∞
                symbol_config = TradingConfig.TRADING_PAIRS.get(symbol, {})
                if not symbol_config:
                    self.logger.error(f"No configuration found for {symbol}")
                    return {
                        'success': False,
                        'error': f'No configuration for {symbol}'
                    }

                # –û–∫—Ä—É–≥–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–≥–ª–∞—Å–Ω–æ lot_size
                lot_size = symbol_config.get('lot_size', 0.001)
                quantity = round(quantity / lot_size) * lot_size

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—Ä–¥–µ—Ä–∞
                order_type = "Market" if price is None else "Limit"

                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ä–¥–µ—Ä–∞
                order_params = {
                    "category": "linear",
                    "symbol": symbol,
                    "side": side,
                    "orderType": order_type,
                    "qty": str(quantity),
                    "timeInForce": "GTC" if order_type == "Limit" else "IOC",
                    "reduceOnly": False,
                    "closeOnTrigger": False
                }

                # –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–Ω—É –¥–ª—è –ª–∏–º–∏—Ç–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞
                if price is not None:
                    symbol_config = TradingConfig.TRADING_PAIRS.get(symbol, {})
                    tick_size = symbol_config.get('tick_size', 0.01)
                    price = round(price / tick_size) * tick_size
                    order_params["price"] = str(price)

                # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ø-–ª–æ—Å—Å –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã
                if stop_loss is not None:
                    order_params["stopLoss"] = str(stop_loss)
                if take_profit is not None:
                    order_params["takeProfit"] = str(take_profit)

                self.logger.info(f"üîÑ PLACING REAL ORDER for {symbol}: {order_params}")

                # –†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞
                response = self.client.place_order(**order_params)

                if response.get('retCode') == 0 and response.get('result'):
                    order_id = response['result']['orderId']

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ä–¥–µ—Ä–µ
                    order_info = {
                        'order_id': order_id,
                        'symbol': symbol,
                        'side': side,
                        'quantity': quantity,
                        'price': price,
                        'order_type': "Market",
                        'stop_loss': stop_loss,
                        'take_profit': take_profit,
                        'status': 'NEW',
                        'timestamp': datetime.now().isoformat(),
                        'simulated': False
                    }

                    self.open_orders[order_id] = order_info
                    self.order_history.append(order_info.copy())

                    self.logger.info(f"‚úÖ REAL ORDER PLACED SUCCESSFULLY: {order_id}")

                    return {
                        'success': True,
                        'order_id': order_id,
                        'symbol': symbol,
                        'side': side,
                        'quantity': quantity,
                        'price': price,
                        'simulated': False
                    }
                else:
                    error_msg = response.get('retMsg', 'Unknown error')
                    self.logger.error(f"‚ùå FAILED TO PLACE REAL ORDER for {symbol}: {error_msg}")
                    return {
                        'success': False,
                        'error': error_msg
                    }

        except Exception as e:
            self.logger.error(f"üí• CRITICAL ERROR placing order for {symbol}: {e}", exc_info=True)
            return {
                'success': False,
                'error': str(e)
            }

    def close_position(self, symbol: str, side: str, quantity: float) -> Optional[Dict[str, Any]]:
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π TESTNET —Å–∏–º—É–ª—è—Ü–∏–∏"""
        try:
            self.logger.info(f"üîÑ ATTEMPTING TO CLOSE POSITION for {symbol}")
            self.logger.info(f"   Side: {side}")
            self.logger.info(f"   Quantity: {quantity}")
            self.logger.info(f"   Testnet Mode: {self.is_testnet}")

            self._rate_limit_check()

            # –í TESTNET —Ä–µ–∂–∏–º–µ —Å–∏–º—É–ª–∏—Ä—É–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ
            if self.is_testnet:
                self.logger.info(f"üß™ TESTNET MODE: Simulating position close for {symbol}")

                order_id = f"TESTNET_CLOSE_{symbol}_{int(datetime.now().timestamp())}"

                self.logger.info(f"‚úÖ TESTNET POSITION CLOSED SUCCESSFULLY: {order_id}")

                return {
                    'success': True,
                    'order_id': order_id,
                    'symbol': symbol,
                    'side': side,
                    'quantity': quantity,
                    'simulated': True
                }

            # –†–µ–∞–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏
            else:
                response = self.client.place_order(
                    category="linear",
                    symbol=symbol,
                    side=side,
                    orderType="Market",
                    qty=str(quantity),
                    timeInForce="IOC",
                    reduceOnly=True,
                    closeOnTrigger=False
                )

                if response.get('retCode') == 0 and response.get('result'):
                    order_id = response['result']['orderId']

                    self.logger.info(f"‚úÖ REAL POSITION CLOSED SUCCESSFULLY: {order_id}")

                    return {
                        'success': True,
                        'order_id': order_id,
                        'symbol': symbol,
                        'side': side,
                        'quantity': quantity,
                        'simulated': False
                    }
                else:
                    error_msg = response.get('retMsg', 'Unknown error')
                    self.logger.error(f"‚ùå FAILED TO CLOSE REAL POSITION for {symbol}: {error_msg}")
                    return {
                        'success': False,
                        'error': error_msg
                    }

        except Exception as e:
            self.logger.error(f"üí• CRITICAL ERROR closing position for {symbol}: {e}", exc_info=True)
            return {
                'success': False,
                'error': str(e)
            }

    def update_stop_loss(self, symbol: str, order_id: str, new_stop_loss: float) -> Optional[Dict[str, Any]]:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π TESTNET"""
        try:
            self.logger.info(f"üîÑ UPDATING STOP LOSS for {symbol}: {new_stop_loss}")

            self._rate_limit_check()

            # –í TESTNET —Ä–µ–∂–∏–º–µ —Å–∏–º—É–ª–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            if self.is_testnet:
                self.logger.info(f"üß™ TESTNET MODE: Simulating stop loss update for {symbol}")

                # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                if order_id in self.open_orders:
                    self.open_orders[order_id]['stop_loss'] = new_stop_loss

                self.logger.info(f"‚úÖ TESTNET STOP LOSS UPDATED: {new_stop_loss}")

                return {
                    'success': True,
                    'order_id': order_id,
                    'new_stop_loss': new_stop_loss,
                    'simulated': True
                }

            # –†–µ–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞
            else:
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–∏–º–≤–æ–ª–∞ –¥–ª—è –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è
                symbol_config = TradingConfig.TRADING_PAIRS.get(symbol, {})
                tick_size = symbol_config.get('tick_size', 0.01)
                new_stop_loss = round(new_stop_loss / tick_size) * tick_size

                response = self.client.amend_order(
                    category="linear",
                    symbol=symbol,
                    orderId=order_id,
                    stopLoss=str(new_stop_loss)
                )

                if response.get('retCode') == 0:
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                    if order_id in self.open_orders:
                        self.open_orders[order_id]['stop_loss'] = new_stop_loss

                    self.logger.info(f"‚úÖ REAL STOP LOSS UPDATED for {symbol}: {new_stop_loss}")

                    return {
                        'success': True,
                        'order_id': order_id,
                        'new_stop_loss': new_stop_loss,
                        'simulated': False
                    }
                else:
                    error_msg = response.get('retMsg', 'Unknown error')
                    self.logger.error(f"‚ùå FAILED TO UPDATE REAL STOP LOSS for {symbol}: {error_msg}")
                    return {
                        'success': False,
                        'error': error_msg
                    }

        except Exception as e:
            self.logger.error(f"üí• CRITICAL ERROR updating stop loss for {symbol}: {e}", exc_info=True)
            return {
                'success': False,
                'error': str(e)
            }

    def cancel_order(self, symbol: str, order_id: str) -> bool:
        """–û—Ç–º–µ–Ω–∞ –æ—Ä–¥–µ—Ä–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π TESTNET"""
        try:
            self.logger.info(f"üîÑ CANCELLING ORDER {order_id} for {symbol}")

            self._rate_limit_check()

            # –í TESTNET —Ä–µ–∂–∏–º–µ —Å–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ç–º–µ–Ω—É
            if self.is_testnet:
                self.logger.info(f"üß™ TESTNET MODE: Simulating order cancellation")

                # –£–¥–∞–ª—è–µ–º –∏–∑ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
                if order_id in self.open_orders:
                    self.open_orders[order_id]['status'] = 'CANCELLED'
                    del self.open_orders[order_id]

                self.logger.info(f"‚úÖ TESTNET ORDER CANCELLED: {order_id}")
                return True

            # –†–µ–∞–ª—å–Ω–∞—è –æ—Ç–º–µ–Ω–∞ –æ—Ä–¥–µ—Ä–∞
            else:
                response = self.client.cancel_order(
                    category="linear",
                    symbol=symbol,
                    orderId=order_id
                )

                if response.get('retCode') == 0:
                    # –£–¥–∞–ª—è–µ–º –∏–∑ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
                    if order_id in self.open_orders:
                        self.open_orders[order_id]['status'] = 'CANCELLED'
                        del self.open_orders[order_id]

                    self.logger.info(f"‚úÖ REAL ORDER CANCELLED: {order_id}")
                    return True
                else:
                    error_msg = response.get('retMsg', 'Unknown error')
                    self.logger.error(f"‚ùå FAILED TO CANCEL REAL ORDER {order_id}: {error_msg}")
                    return False

        except Exception as e:
            self.logger.error(f"üí• CRITICAL ERROR cancelling order {order_id}: {e}", exc_info=True)
            return False

    def get_order_status(self, symbol: str, order_id: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ä–¥–µ—Ä–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π TESTNET"""
        try:
            # –í TESTNET —Ä–µ–∂–∏–º–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å
            if self.is_testnet:
                if order_id in self.open_orders:
                    order_info = self.open_orders[order_id]
                    return {
                        'order_id': order_id,
                        'symbol': symbol,
                        'side': order_info['side'],
                        'quantity': order_info['quantity'],
                        'price': order_info['price'],
                        'status': 'FILLED',  # –í testnet –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–æ
                        'filled_qty': order_info['quantity'],
                        'avg_price': order_info['price'] or 0,
                        'simulated': True
                    }
                return None

            # –†–µ–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞
            else:
                self._rate_limit_check()

                response = self.client.get_open_orders(
                    category="linear",
                    symbol=symbol,
                    orderId=order_id
                )

                if response.get('retCode') == 0 and response.get('result', {}).get('list'):
                    order_data = response['result']['list'][0]
                    return {
                        'order_id': order_data.get('orderId'),
                        'symbol': order_data.get('symbol'),
                        'side': order_data.get('side'),
                        'quantity': float(order_data.get('qty', 0)),
                        'price': float(order_data.get('price', 0)),
                        'status': order_data.get('orderStatus'),
                        'filled_qty': float(order_data.get('cumExecQty', 0)),
                        'avg_price': float(order_data.get('avgPrice', 0)),
                        'simulated': False
                    }
                else:
                    # –û—Ä–¥–µ—Ä –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª–Ω–µ–Ω –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω
                    return None

        except Exception as e:
            self.logger.error(f"Error getting order status for {order_id}: {e}")
            return None

    def get_open_orders(self, symbol: str = None) -> Dict[str, Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤"""
        if symbol:
            return {k: v for k, v in self.open_orders.items() if v['symbol'] == symbol}
        return self.open_orders.copy()

    def update_orders_status(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤"""
        try:
            orders_to_remove = []

            for order_id, order_info in self.open_orders.items():
                try:
                    status = self.get_order_status(order_info['symbol'], order_id)

                    if status is None:
                        # –û—Ä–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω - –≤–æ–∑–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª–Ω–µ–Ω –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω
                        orders_to_remove.append(order_id)
                    else:
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                        self.open_orders[order_id]['status'] = status['status']

                        # –ï—Å–ª–∏ –æ—Ä–¥–µ—Ä –∏—Å–ø–æ–ª–Ω–µ–Ω –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω, —É–¥–∞–ª—è–µ–º –∏–∑ –æ—Ç–∫—Ä—ã—Ç—ã—Ö
                        if status['status'] in ['Filled', 'Cancelled', 'Rejected', 'FILLED']:
                            orders_to_remove.append(order_id)

                except Exception as e:
                    self.logger.error(f"Error updating status for order {order_id}: {e}")

            # –£–¥–∞–ª—è–µ–º –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ/–æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞
            for order_id in orders_to_remove:
                if order_id in self.open_orders:
                    self.logger.info(f"üóëÔ∏è Removing completed order: {order_id}")
                    del self.open_orders[order_id]

        except Exception as e:
            self.logger.error(f"Error updating orders status: {e}")

    def cancel_all_orders(self, symbol: str = None) -> Dict[str, bool]:
        """–û—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤"""
        results = {}
        orders_to_cancel = list(self.open_orders.keys())

        if symbol:
            orders_to_cancel = [
                order_id for order_id, order_info in self.open_orders.items()
                if order_info['symbol'] == symbol
            ]

        for order_id in orders_to_cancel:
            try:
                order_info = self.open_orders[order_id]
                result = self.cancel_order(order_info['symbol'], order_id)
                results[order_id] = result

                if result:
                    self.logger.info(f"‚úÖ Cancelled order {order_id}")
                else:
                    self.logger.warning(f"‚ùå Failed to cancel order {order_id}")

            except Exception as e:
                self.logger.error(f"Error cancelling order {order_id}: {e}")
                results[order_id] = False

        return results

    def get_order_history(self, limit: int = 50) -> list:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ä–¥–µ—Ä–æ–≤"""
        return self.order_history[-limit:] if self.order_history else []

    def get_orders_summary(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –ø–æ –æ—Ä–¥–µ—Ä–∞–º"""
        try:
            total_orders = len(self.order_history)
            open_orders_count = len(self.open_orders)

            # –ü–æ–¥—Å—á–µ—Ç –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
            status_counts = {}
            for order in self.order_history:
                status = order.get('status', 'UNKNOWN')
                status_counts[status] = status_counts.get(status, 0) + 1

            return {
                'total_orders': total_orders,
                'open_orders': open_orders_count,
                'status_breakdown': status_counts,
                'last_order_time': self.order_history[-1]['timestamp'] if self.order_history else None,
                'testnet_mode': self.is_testnet
            }

        except Exception as e:
            self.logger.error(f"Error getting orders summary: {e}")
            return {}

    def health_check(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ OrderManager"""
        try:
            # –í TESTNET —Ä–µ–∂–∏–º–µ –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º True
            if self.is_testnet:
                self.logger.info("OrderManager health check: OK (TESTNET)")
                return True

            # –†–µ–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
            self._rate_limit_check()
            response = self.client.get_wallet_balance(accountType="UNIFIED")

            if response.get('retCode') == 0:
                self.logger.info("OrderManager health check: OK (REAL)")
                return True
            else:
                self.logger.warning("OrderManager health check: FAILED (REAL)")
                return False

        except Exception as e:
            self.logger.error(f"OrderManager health check error: {e}")
            return False

    def get_testnet_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ TESTNET —Ä–µ–∂–∏–º–∞"""
        return {
            'is_testnet': self.is_testnet,
            'total_simulated_orders': len([o for o in self.order_history if o.get('simulated', False)]),
            'total_real_orders': len([o for o in self.order_history if not o.get('simulated', True)]),
            'open_orders_count': len(self.open_orders)
        }