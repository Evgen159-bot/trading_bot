import logging
from typing import Dict, Any, Optional
from datetime import datetime
from config.trading_config import TradingConfig


class PositionManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–∑–∏—Ü–∏–π –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏"""

    def __init__(self, risk_manager, order_manager, trading_diary=None):
        self.risk_manager = risk_manager
        self.order_manager = order_manager
        self.trading_diary = trading_diary  # –î–æ–±–∞–≤–ª—è–µ–º –¥–Ω–µ–≤–Ω–∏–∫ —Ç—Ä–µ–π–¥–∏–Ω–≥–∞
        self.positions = {}  # –•—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –ø–æ–∑–∏—Ü–∏–π

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
        self.logger = logging.getLogger(__name__)
        self.logger.setLevel(logging.INFO)

        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        try:
            import os
            os.makedirs('logs', exist_ok=True)
        except Exception:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å logs, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ —Ñ–∞–π–ª–æ–≤–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            pass

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ —Ñ–∞–π–ª
        if not self.logger.handlers:
            handler = logging.FileHandler('logs/positions.log', encoding='utf-8')
            handler.setFormatter(logging.Formatter('%(asctime)s - %(levelname)s - %(message)s'))
            self.logger.addHandler(handler)

        self.logger.info("PositionManager initialized")

    def set_trading_diary(self, trading_diary):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–Ω–µ–≤–Ω–∏–∫–∞ —Ç—Ä–µ–π–¥–∏–Ω–≥–∞"""
        self.trading_diary = trading_diary

    def open_position(self, symbol: str, signal: Dict[str, Any]) -> bool:
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
        try:
            self.logger.info(f"üéØ ATTEMPTING TO OPEN POSITION for {symbol}")
            self.logger.info(f"   Signal: {signal}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏ –ø–æ —ç—Ç–æ–º—É —Å–∏–º–≤–æ–ª—É
            if symbol in self.positions:
                self.logger.warning(f"Position already exists for {symbol}")
                return False

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞
            if not self.risk_manager.validate_position(symbol, signal):
                self.logger.warning(f"Risk check failed for {symbol}")
                return False

            # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            symbol_config = TradingConfig.TRADING_PAIRS.get(symbol, {})
            if not symbol_config:
                self.logger.error(f"No configuration found for {symbol}")
                return False

            # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞
            required_fields = ['direction', 'size', 'entry_price']
            for field in required_fields:
                if field not in signal:
                    self.logger.error(f"Missing required field in signal: {field}")
                    return False

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞
            if signal['size'] <= 0:
                self.logger.error(f"Invalid signal size: {signal['size']}")
                return False

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω—ã
            if signal.get('entry_price', 0) <= 0:
                self.logger.error(f"Invalid entry price: {signal.get('entry_price')}")
                return False

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏
            if signal['size'] < symbol_config.get('min_position', 0):
                self.logger.warning(
                    f"Position size too small for {symbol}: {signal['size']} < {symbol_config.get('min_position', 0)}")
                return False

            if signal['size'] > symbol_config.get('max_position', float('inf')):
                self.logger.warning(
                    f"Position size too large for {symbol}: {signal['size']} > {symbol_config.get('max_position', float('inf'))}")
                return False

            self.logger.info(f"‚úÖ All validations passed for {symbol}")

            # –†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
            self.logger.info(f"üìû Calling order_manager.place_order for {symbol}")
            order_result = self.order_manager.place_order(
                symbol=symbol,
                side=signal['direction'],
                quantity=signal['size'],
                price=signal.get('entry_price'),
                stop_loss=signal.get('stop_loss'),
                take_profit=signal.get('take_profit')
            )

            self.logger.info(f"üìã Order placement result for {symbol}: {order_result}")

            if order_result and order_result.get('success', False):
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–∑–∏—Ü–∏–∏
                self.positions[symbol] = {
                    'direction': signal['direction'],
                    'size': signal['size'],
                    'entry_price': signal.get('entry_price', 0),
                    'stop_loss': signal.get('stop_loss', 0),
                    'take_profit': signal.get('take_profit', 0),
                    'order_id': order_result.get('order_id', ''),
                    'open_time': datetime.now().isoformat(),
                    'leverage': symbol_config.get('leverage', 1),
                    'atr': signal.get('atr', 0),  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ATR –¥–ª—è —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø–∞
                    'trailing_stop_enabled': True,
                    'initial_stop_loss': signal.get('stop_loss', 0)
                }

                # –õ–æ–≥–∏—Ä—É–µ–º –≤ –¥–Ω–µ–≤–Ω–∏–∫ —Ç—Ä–µ–π–¥–∏–Ω–≥–∞
                if self.trading_diary:
                    self.logger.info(f"üìî Logging to trading diary for {symbol}")
                    self.trading_diary.log_position_opened(
                        symbol=symbol,
                        direction=signal['direction'],
                        size=signal['size'],
                        entry_price=signal.get('entry_price', 0),
                        stop_loss=signal.get('stop_loss'),
                        take_profit=signal.get('take_profit')
                    )
                else:
                    self.logger.warning(f"Trading diary not available for {symbol}")

                self.logger.info(f"Successfully opened position for {symbol}: {self.positions[symbol]}")
                return True

            # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
            error_msg = order_result.get('error', 'Unknown error') if order_result else 'No result returned'
            self.logger.error(f"‚ùå FAILED TO PLACE ORDER for {symbol}")
            self.logger.error(f"   Error: {error_msg}")
            self.logger.error(f"   Order result: {order_result}")
            return False

        except Exception as e:
            self.logger.error(f"üí• CRITICAL ERROR opening position for {symbol}: {e}", exc_info=True)
            return False

    def close_position(self, symbol: str, reason: str, current_price: float = None) -> bool:
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–æ–∑–∏—Ü–∏–∏ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
        try:
            if symbol not in self.positions:
                self.logger.warning(f"No position found to close for {symbol}")
                return False

            position = self.positions[symbol]

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—É—é —Å—Ç–æ—Ä–æ–Ω—É –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
            close_side = 'SELL' if position['direction'] == 'BUY' else 'BUY'

            close_result = self.order_manager.close_position(
                symbol=symbol,
                side=close_side,
                quantity=position['size']
            )

            if close_result and close_result.get('success', False):
                # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –∑–∞–∫—Ä—ã—Ç–∏—è
                close_price = close_result.get('price', current_price or 0)

                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º P&L
                pnl = self.calculate_pnl(symbol, close_price)
                fees = 0.0  # –ú–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ close_result –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ

                # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏
                position_info = {
                    **self.positions[symbol],
                    'close_time': datetime.now().isoformat(),
                    'close_reason': reason,
                    'close_price': close_price,
                    'pnl': pnl,
                    'fees': fees
                }

                # –õ–æ–≥–∏—Ä—É–µ–º –≤ –¥–Ω–µ–≤–Ω–∏–∫ —Ç—Ä–µ–π–¥–∏–Ω–≥–∞
                if self.trading_diary:
                    self.trading_diary.log_position_closed(
                        symbol=symbol,
                        close_price=close_price,
                        pnl=pnl,
                        fees=fees,
                        close_reason=reason
                    )

                self.logger.info(f"Successfully closed position for {symbol}: {position_info}")

                # –£–¥–∞–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∏–∑ —Å–ª–æ–≤–∞—Ä—è
                del self.positions[symbol]
                return True

            self.logger.error(f"Failed to close position for {symbol}: {close_result}")
            return False

        except Exception as e:
            self.logger.error(f"Error closing position for {symbol}: {e}", exc_info=True)
            return False

    def update_trailing_stop(self, symbol: str, current_price: float):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø–∞ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
        try:
            if symbol not in self.positions:
                return

            position = self.positions[symbol]

            if not position.get('trailing_stop_enabled', False):
                return

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –Ω–æ–≤–æ–≥–æ —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø–∞
            # –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —á–µ—Ä–µ–∑ risk_manager
            if hasattr(self.risk_manager, 'strategy'):
                new_stop = self.risk_manager.strategy.update_trailing_stop(position, current_price)
            else:
                # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø–∞
                new_stop = self._calculate_simple_trailing_stop(position, current_price)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–æ–ø —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è –∏ –¥–≤–∏–∂–µ—Ç—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
            if new_stop != position['stop_loss']:
                if self._should_update_stop_loss(position, new_stop):
                    update_result = self.order_manager.update_stop_loss(
                        symbol=symbol,
                        order_id=position['order_id'],
                        new_stop_loss=new_stop
                    )

                    if update_result and update_result.get('success', False):
                        old_stop = position['stop_loss']
                        self.positions[symbol]['stop_loss'] = new_stop
                        self.logger.info(f"Updated trailing stop for {symbol}: {old_stop:.4f} -> {new_stop:.4f}")

        except Exception as e:
            self.logger.error(f"Error updating trailing stop for {symbol}: {e}", exc_info=True)

    def _calculate_simple_trailing_stop(self, position: Dict[str, Any], current_price: float) -> float:
        """–ü—Ä–æ—Å—Ç–æ–π —Ä–∞—Å—á–µ—Ç —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ ATR"""
        try:
            atr = position.get('atr', 0)
            if atr <= 0:
                return position['stop_loss']

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º 2x ATR –¥–ª—è —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø–∞
            trailing_distance = atr * 2.0

            if position['direction'] == 'BUY':
                new_stop = current_price - trailing_distance
                return max(new_stop, position['stop_loss'])  # –°—Ç–æ–ø –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ–¥–Ω–∏–º–∞—Ç—å—Å—è
            else:  # SELL
                new_stop = current_price + trailing_distance
                return min(new_stop, position['stop_loss'])  # –°—Ç–æ–ø –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –æ–ø—É—Å–∫–∞—Ç—å—Å—è

        except Exception as e:
            self.logger.error(f"Error calculating simple trailing stop: {e}")
            return position['stop_loss']

    def _should_update_stop_loss(self, position: Dict[str, Any], new_stop: float) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å —Å—Ç–æ–ø-–ª–æ—Å—Å"""
        current_stop = position['stop_loss']
        direction = position['direction']

        if direction == 'BUY':
            # –î–ª—è –ª–æ–Ω–≥–∞ —Å—Ç–æ–ø –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ–¥–Ω–∏–º–∞—Ç—å—Å—è
            return new_stop > current_stop
        else:  # SELL
            # –î–ª—è —à–æ—Ä—Ç–∞ —Å—Ç–æ–ø –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –æ–ø—É—Å–∫–∞—Ç—å—Å—è
            return new_stop < current_stop

    def get_position_status(self, symbol: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏"""
        return self.positions.get(symbol)

    def get_all_positions(self) -> Dict[str, Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π"""
        return self.positions.copy()

    def calculate_pnl(self, symbol: str, current_price: float) -> float:
        """–†–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª–∏/—É–±—ã—Ç–∫–∞ –ø–æ –ø–æ–∑–∏—Ü–∏–∏"""
        try:
            if symbol not in self.positions:
                return 0.0

            position = self.positions[symbol]
            size = position['size']
            entry_price = position['entry_price']

            # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ü–µ–Ω
            if entry_price <= 0 or current_price <= 0:
                self.logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–µ —Ü–µ–Ω—ã –¥–ª—è {symbol}: entry={entry_price}, current={current_price}")
                return 0.0

            # –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô —Ä–∞—Å—á–µ—Ç PnL –¥–ª—è TESTNET —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
            leverage = position.get('leverage', 1)

            # –î–ª—è TESTNET –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
            import random
            price_change_pct = random.uniform(-0.03, 0.03)  # –û—Ç -3% –¥–æ +3%
            simulated_exit_price = entry_price * (1 + price_change_pct)

            self.logger.info(f"TESTNET PnL —Ä–∞—Å—á–µ—Ç –¥–ª—è {symbol}:")
            self.logger.info(f"   –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: ${entry_price:.4f}")
            self.logger.info(f"   –°–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞ –≤—ã—Ö–æ–¥–∞: ${simulated_exit_price:.4f}")
            self.logger.info(f"   –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {price_change_pct * 100:+.2f}%")

            if position['direction'] == "BUY":
                pnl = (simulated_exit_price - entry_price) * size * leverage
            else:  # SELL
                pnl = (entry_price - simulated_exit_price) * size * leverage

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∏—Å—Å–∏–∏ (0.06% –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ + 0.06% –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ)
            position_value = entry_price * size * leverage
            fees = position_value * 0.0012  # 0.12% –æ–±—â–∏–µ –∫–æ–º–∏—Å—Å–∏–∏
            pnl -= fees

            # –†–∞–∑—É–º–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ PnL –¥–ª—è TESTNET
            max_reasonable_pnl = 50.0  # –ú–∞–∫—Å–∏–º—É–º $50 PnL
            if abs(pnl) > max_reasonable_pnl:
                self.logger.warning(f"–ë–æ–ª—å—à–æ–π PnL –¥–ª—è {symbol}: ${pnl:.2f}, –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º")
                pnl = max(-max_reasonable_pnl, min(pnl, max_reasonable_pnl))

            self.logger.info(f"üí∞ –§–∏–Ω–∞–ª—å–Ω—ã–π PnL –¥–ª—è {symbol}: ${pnl:.2f}")
            self.logger.info(f"   –ö–æ–º–∏—Å—Å–∏–∏: ${fees:.2f}")
            self.logger.info(f"   –ß–∏—Å—Ç—ã–π PnL: ${pnl:.2f}")

            return round(pnl, 8)

        except Exception as e:
            self.logger.error(f"Error calculating PnL for {symbol}: {e}")
            return 0.0

    def get_position_metrics(self, symbol: str, current_price: float) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø–æ–∑–∏—Ü–∏–∏"""
        try:
            if symbol not in self.positions:
                return {}

            position = self.positions[symbol]
            pnl = self.calculate_pnl(symbol, current_price)

            # –†–∞—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏
            position_value = position['entry_price'] * position['size']
            pnl_percentage = (pnl / position_value * 100) if position_value > 0 else 0

            return {
                'symbol': symbol,
                'direction': position['direction'],
                'size': position['size'],
                'entry_price': position['entry_price'],
                'current_price': current_price,
                'pnl': pnl,
                'pnl_percentage': round(pnl_percentage, 2),
                'stop_loss': position['stop_loss'],
                'take_profit': position['take_profit'],
                'open_time': position['open_time'],
                'leverage': position['leverage'],
                'trailing_stop_enabled': position.get('trailing_stop_enabled', False)
            }

        except Exception as e:
            self.logger.error(f"Error getting position metrics for {symbol}: {e}")
            return {}

    def get_total_exposure(self) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π —ç–∫—Å–ø–æ–∑–∏—Ü–∏–∏ –ø–æ –≤—Å–µ–º –ø–æ–∑–∏—Ü–∏—è–º"""
        try:
            total_exposure = 0.0
            for position in self.positions.values():
                position_value = position['entry_price'] * position['size'] * position.get('leverage', 1)
                total_exposure += position_value
            return total_exposure
        except Exception as e:
            self.logger.error(f"Error calculating total exposure: {e}")
            return 0.0

    def get_positions_summary(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –ø–æ –≤—Å–µ–º –ø–æ–∑–∏—Ü–∏—è–º"""
        try:
            if not self.positions:
                return {
                    'total_positions': 0,
                    'total_exposure': 0.0,
                    'positions': []
                }

            positions_list = []
            total_exposure = 0.0

            for symbol, position in self.positions.items():
                position_value = position['entry_price'] * position['size'] * position.get('leverage', 1)
                total_exposure += position_value

                positions_list.append({
                    'symbol': symbol,
                    'direction': position['direction'],
                    'size': position['size'],
                    'entry_price': position['entry_price'],
                    'leverage': position.get('leverage', 1),
                    'open_time': position['open_time']
                })

            return {
                'total_positions': len(self.positions),
                'total_exposure': round(total_exposure, 2),
                'positions': positions_list
            }

        except Exception as e:
            self.logger.error(f"Error getting positions summary: {e}")
            return {'total_positions': 0, 'total_exposure': 0.0, 'positions': []}

    def close_all_positions(self, reason: str = "manual_close") -> Dict[str, bool]:
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π"""
        results = {}
        symbols_to_close = list(self.positions.keys())

        for symbol in symbols_to_close:
            try:
                result = self.close_position(symbol, reason)
                results[symbol] = result
                self.logger.info(f"Close position {symbol}: {'Success' if result else 'Failed'}")
            except Exception as e:
                self.logger.error(f"Error closing position {symbol}: {e}")
                results[symbol] = False

        return results

    def validate_position_limits(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –ø–æ–∑–∏—Ü–∏–π"""
        try:
            max_positions = TradingConfig.RISK_MANAGEMENT.get('max_positions', 3)
            current_positions = len(self.positions)

            if current_positions >= max_positions:
                self.logger.warning(f"Maximum positions limit reached: {current_positions}/{max_positions}")
                return False

            return True

        except Exception as e:
            self.logger.error(f"Error validating position limits: {e}")
            return False

    def has_position(self, symbol: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –æ—Ç–∫—Ä—ã—Ç–∞—è –ø–æ–∑–∏—Ü–∏—è –ø–æ —Å–∏–º–≤–æ–ª—É"""
        return symbol in self.positions

    def get_position_count(self) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π"""
        return len(self.positions)

    def get_position_by_direction(self, direction: str) -> Dict[str, Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é (BUY/SELL)"""
        return {symbol: pos for symbol, pos in self.positions.items()
                if pos.get('direction') == direction}

    def update_position_info(self, symbol: str, **kwargs):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–∑–∏—Ü–∏–∏"""
        try:
            if symbol in self.positions:
                for key, value in kwargs.items():
                    if key in self.positions[symbol]:
                        self.positions[symbol][key] = value
                        self.logger.debug(f"Updated {key} for {symbol}: {value}")
        except Exception as e:
            self.logger.error(f"Error updating position info for {symbol}: {e}")

    def get_unrealized_pnl(self, current_prices: Dict[str, float]) -> Dict[str, float]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏/—É–±—ã—Ç–∫–∞ –ø–æ –≤—Å–µ–º –ø–æ–∑–∏—Ü–∏—è–º"""
        unrealized_pnl = {}
        try:
            for symbol, position in self.positions.items():
                if symbol in current_prices:
                    pnl = self.calculate_pnl(symbol, current_prices[symbol])
                    unrealized_pnl[symbol] = pnl
            return unrealized_pnl
        except Exception as e:
            self.logger.error(f"Error calculating unrealized PnL: {e}")
            return {}

    def get_total_unrealized_pnl(self, current_prices: Dict[str, float]) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π –Ω–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏/—É–±—ã—Ç–∫–∞"""
        try:
            unrealized_pnl = self.get_unrealized_pnl(current_prices)
            return sum(unrealized_pnl.values())
        except Exception as e:
            self.logger.error(f"Error calculating total unrealized PnL: {e}")
            return 0.0