import logging
import os
import json
from datetime import datetime, date, timedelta
from typing import Dict, List, Optional, Any
import pandas as pd
from pathlib import Path
import threading
import time


class TradingDiary:
    """–î–Ω–µ–≤–Ω–∏–∫ —Ç—Ä–µ–π–¥–∏–Ω–≥–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–Ω–µ–≤–Ω–∏–∫–∞ —Ç—Ä–µ–π–¥–∏–Ω–≥–∞"""
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è –¥–Ω–µ–≤–Ω–∏–∫–∞
        self.logger = self._setup_diary_logger()

        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –¥–Ω–µ–≤–Ω–∏–∫–∞
        self.diary_dir = Path("data/diary")
        self.diary_dir.mkdir(parents=True, exist_ok=True)

        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤ –¥–Ω–µ–≤–Ω–∏–∫–∞
        self.diary_logs_dir = Path("logs/trading_diary")
        self.diary_logs_dir.mkdir(parents=True, exist_ok=True)

        # –¢–µ–∫—É—â–∏–π —Ç–æ—Ä–≥–æ–≤—ã–π –¥–µ–Ω—å
        self.current_date = date.today()
        self.session_start_time = datetime.now()
        self.session_start_balance = 0.0
        self.current_balance = 0.0

        # –î–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
        self.daily_data = {
            'date': self.current_date.isoformat(),
            'session_start': self.session_start_time.isoformat(),
            'start_balance': 0.0,
            'current_balance': 0.0,
            'positions': [],
            'trades': [],
            'daily_stats': {
                'total_trades': 0,
                'winning_trades': 0,
                'losing_trades': 0,
                'total_pnl': 0.0,
                'total_fees': 0.0,
                'max_profit': 0.0,
                'max_loss': 0.0,
                'win_rate': 0.0,
                'profit_factor': 0.0
            },
            'session_end': None,
            'end_balance': 0.0,
            'daily_return': 0.0,
            'daily_return_pct': 0.0
        }

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        self._load_daily_data()

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
        self._start_periodic_logging()

        self.logger.info("TradingDiary initialized successfully")

    def _setup_diary_logger(self) -> logging.Logger:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è –¥–Ω–µ–≤–Ω–∏–∫–∞"""
        logger = logging.getLogger("trading_diary")
        logger.setLevel(logging.INFO)

        # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        logger.handlers.clear()

        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤ –¥–Ω–µ–≤–Ω–∏–∫–∞
        diary_logs_dir = Path("logs/trading_diary")
        diary_logs_dir.mkdir(parents=True, exist_ok=True)

        # –§–∞–π–ª–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–Ω–µ–≤–Ω–∏–∫–∞
        log_file = diary_logs_dir / f"diary_log_{datetime.now().strftime('%Y%m%d')}.log"
        file_handler = logging.FileHandler(log_file, encoding='utf-8')
        file_handler.setFormatter(
            logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        )
        logger.addHandler(file_handler)

        return logger

    def _start_periodic_logging(self):
        """–ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤"""

        def periodic_log():
            while True:
                try:
                    time.sleep(6 * 3600)  # 6 —á–∞—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
                    self._log_periodic_status()
                except Exception as e:
                    self.logger.error(f"Error in periodic logging: {e}")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        log_thread = threading.Thread(target=periodic_log, daemon=True)
        log_thread.start()
        self.logger.info("Periodic logging started (every 6 hours)")

    def _log_periodic_status(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–Ω–µ–≤–Ω–∏–∫–∞"""
        try:
            current_status = self.get_current_day_status()

            self.logger.info("=" * 60)
            self.logger.info("üìä –ü–ï–†–ò–û–î–ò–ß–ï–°–ö–ò–ô –û–¢–ß–ï–¢ –î–ù–ï–í–ù–ò–ö–ê (–∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤)")
            self.logger.info("=" * 60)
            self.logger.info(f"üìÖ –î–∞—Ç–∞: {current_status['date']}")
            self.logger.info(f"üí∞ –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${current_status['start_balance']:.2f}")
            self.logger.info(f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${current_status['current_balance']:.2f}")
            self.logger.info(f"üìà –î–Ω–µ–≤–Ω–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${current_status['daily_return']:.2f}")
            self.logger.info(f"üîÑ –û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {current_status['open_positions']}")
            self.logger.info(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {current_status['completed_trades']}")

            stats = current_status['daily_stats']
            if stats['total_trades'] > 0:
                self.logger.info(f"üéØ Win Rate: {stats['win_rate']:.1f}%")
                self.logger.info(f"üíµ –û–±—â–∏–π P&L: ${stats['total_pnl']:.2f}")
                self.logger.info(f"üíé –õ—É—á—à–∞—è —Å–¥–µ–ª–∫–∞: ${stats['max_profit']:.2f}")
                self.logger.info(f"üìâ –•—É–¥—à–∞—è —Å–¥–µ–ª–∫–∞: ${stats['max_loss']:.2f}")

            self.logger.info("=" * 60)

            # –î–µ—Ç–∞–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–¥–µ–ª–æ–∫
            recent_trades = self.daily_data.get('trades', [])[-3:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å–¥–µ–ª–∫–∏
            if recent_trades:
                self.logger.info("üìà –ü–û–°–õ–ï–î–ù–ò–ï –°–î–ï–õ–ö–ò:")
                for i, trade in enumerate(recent_trades, 1):
                    pnl_status = "üíö –ü–†–ò–ë–´–õ–¨" if trade.get('net_pnl', 0) > 0 else "‚ù§Ô∏è –£–ë–´–¢–û–ö"
                    self.logger.info(f"   {i}. {trade['symbol']} {trade['direction']} | "
                                     f"{pnl_status}: ${trade.get('net_pnl', 0):.2f} | "
                                     f"ROI: {trade.get('roi_pct', 0):+.2f}% | "
                                     f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {trade.get('duration', 'N/A')}")

            # –û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
            open_positions = [p for p in self.daily_data.get('positions', []) if p.get('status') == 'OPEN']
            if open_positions:
                self.logger.info("üîÑ –û–¢–ö–†–´–¢–´–ï –ü–û–ó–ò–¶–ò–ò:")
                for pos in open_positions:
                    self.logger.info(f"   ‚Ä¢ {pos['symbol']} {pos['direction']} | "
                                     f"–†–∞–∑–º–µ—Ä: {pos['size']} | "
                                     f"–¶–µ–Ω–∞: ${pos['entry_price']:.4f}")

            self.logger.info("üìä –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")

        except Exception as e:
            self.logger.error(f"Error in periodic status logging: {e}")

    def start_trading_session(self, initial_balance: float) -> None:
        """–ù–∞—á–∞–ª–æ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–µ—Å—Å–∏–∏"""
        try:
            self.session_start_balance = initial_balance
            self.current_balance = initial_balance

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–æ–≤—ã–π –ª–∏ —ç—Ç–æ –¥–µ–Ω—å
            if self.current_date != date.today():
                self._save_daily_data()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –¥–µ–Ω—å
                self._start_new_day()

            self.daily_data['start_balance'] = initial_balance
            self.daily_data['current_balance'] = initial_balance
            self.daily_data['session_start'] = datetime.now().isoformat()

            # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ —Å–µ—Å—Å–∏–∏
            self.logger.info(f"üìÖ –¢–û–†–ì–û–í–ê–Ø –°–ï–°–°–ò–Ø –ù–ê–ß–ê–¢–ê: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}")
            self.logger.info(f"üí∞ –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${initial_balance:.2f}")

            self.logger.info(f"Trading session started with balance: ${initial_balance:.2f}")
            print(f"\nüìÖ –¢–æ—Ä–≥–æ–≤–∞—è —Å–µ—Å—Å–∏—è –Ω–∞—á–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}")
            print(f"üí∞ –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${initial_balance:.2f}")

        except Exception as e:
            self.logger.error(f"Error starting trading session: {e}")

    def log_position_opened(self, symbol: str, direction: str, size: float,
                            entry_price: float, stop_loss: float = None,
                            take_profit: float = None) -> None:
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏"""
        try:
            position = {
                'id': len(self.daily_data['positions']) + 1,
                'symbol': symbol,
                'direction': direction,
                'size': size,
                'entry_price': entry_price,
                'stop_loss': stop_loss,
                'take_profit': take_profit,
                'open_time': datetime.now().isoformat(),
                'status': 'OPEN',
                'close_time': None,
                'close_price': None,
                'pnl': 0.0,
                'fees': 0.0,
                'close_reason': None
            }

            self.daily_data['positions'].append(position)

            # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏
            self.logger.info(f"üìà –ü–û–ó–ò–¶–ò–Ø –û–¢–ö–†–´–¢–ê:")
            self.logger.info(f"   üéØ –°–∏–º–≤–æ–ª: {symbol}")
            self.logger.info(f"   üìä –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {direction}")
            self.logger.info(f"   üìè –†–∞–∑–º–µ—Ä: {size}")
            self.logger.info(f"   üíµ –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: ${entry_price:.4f}")
            if stop_loss:
                self.logger.info(f"   üõë –°—Ç–æ–ø-–ª–æ—Å—Å: ${stop_loss:.4f}")
            if take_profit:
                self.logger.info(f"   üéØ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: ${take_profit:.4f}")

            self.logger.info(f"Position opened: {symbol} {direction} {size} @ {entry_price}")
            print(f"\nüìà –ü–æ–∑–∏—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞:")
            print(f"   üéØ {symbol} | {direction} | –†–∞–∑–º–µ—Ä: {size}")
            print(f"   üíµ –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: ${entry_price:.4f}")
            if stop_loss:
                print(f"   üõë –°—Ç–æ–ø-–ª–æ—Å—Å: ${stop_loss:.4f}")
            if take_profit:
                print(f"   üéØ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: ${take_profit:.4f}")

            self._save_daily_data()

        except Exception as e:
            self.logger.error(f"Error logging position opened: {e}")

    def log_position_closed(self, symbol: str, close_price: float, pnl: float,
                            fees: float = 0.0, close_reason: str = "manual") -> None:
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
            if close_price <= 0:
                self.logger.error(f"–ù–µ–≤–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –¥–ª—è {symbol}: {close_price}")
                close_price = 1.0  # Fallback

            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º PnL –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∞–Ω–æ–º–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            if abs(pnl) > 50:
                self.logger.warning(f"–û—á–µ–Ω—å –±–æ–ª—å—à–æ–π PnL –¥–ª—è {symbol}: ${pnl:.2f}, –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º")
                pnl = max(-50, min(pnl, 50))  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ—Ç -$50 –¥–æ +$50

            # –ù–∞—Ö–æ–¥–∏–º –æ—Ç–∫—Ä—ã—Ç—É—é –ø–æ–∑–∏—Ü–∏—é
            position = None
            for pos in self.daily_data['positions']:
                if pos['symbol'] == symbol and pos['status'] == 'OPEN':
                    position = pos
                    break

            if not position:
                self.logger.warning(f"No open position found for {symbol}")
                return

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é
            position['status'] = 'CLOSED'
            position['close_time'] = datetime.now().isoformat()
            position['close_price'] = close_price
            position['pnl'] = pnl
            position['fees'] = fees
            position['close_reason'] = close_reason

            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —Å–¥–µ–ª–∫–µ
            trade = {
                'id': len(self.daily_data['trades']) + 1,
                'symbol': symbol,
                'direction': position['direction'],
                'size': position['size'],
                'entry_price': position['entry_price'],
                'exit_price': close_price,
                'pnl': pnl,
                'fees': fees,
                'net_pnl': pnl - fees,
                'open_time': position['open_time'],
                'close_time': position['close_time'],
                'duration': self._calculate_duration(position['open_time'], position['close_time']),
                'close_reason': close_reason,
                'roi_pct': self._calculate_roi_pct(pnl, position)
            }

            self.daily_data['trades'].append(trade)

            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
            self.current_balance += (pnl - fees)
            self.daily_data['current_balance'] = self.current_balance

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self._update_daily_stats(trade)

            # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏
            profit_emoji = "üíö" if pnl > 0 else "‚ù§Ô∏è"
            self.logger.info(f"üìâ –ü–û–ó–ò–¶–ò–Ø –ó–ê–ö–†–´–¢–ê:")
            self.logger.info(f"   üéØ –°–∏–º–≤–æ–ª: {symbol}")
            self.logger.info(f"   üìä –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {position['direction']}")
            self.logger.info(f"   üíµ –¶–µ–Ω–∞ –≤—ã—Ö–æ–¥–∞: ${close_price:.4f}")
            self.logger.info(f"   {profit_emoji} P&L: ${pnl:.2f} (–∫–æ–º–∏—Å—Å–∏—è: ${fees:.2f})")
            self.logger.info(f"   üìä ROI: {trade['roi_pct']:.2f}%")
            self.logger.info(f"   ‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {trade['duration']}")
            self.logger.info(f"   üìù –ü—Ä–∏—á–∏–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è: {close_reason}")
            self.logger.info(f"   üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${self.current_balance:.2f}")

            # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            profit_emoji = "üíö" if pnl > 0 else "‚ù§Ô∏è"
            print(f"\nüìâ –ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞:")
            print(f"   üéØ {symbol} | {position['direction']}")
            print(f"   üíµ –¶–µ–Ω–∞ –≤—ã—Ö–æ–¥–∞: ${close_price:.4f}")
            print(f"   {profit_emoji} P&L: ${pnl:.2f} (–∫–æ–º–∏—Å—Å–∏—è: ${fees:.2f})")
            print(f"   üìä ROI: {trade['roi_pct']:.2f}%")
            print(f"   ‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {trade['duration']}")
            print(f"   üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${self.current_balance:.2f}")

            self._save_daily_data()

        except Exception as e:
            self.logger.error(f"Error logging position closed: {e}")

    def _calculate_roi_pct(self, pnl: float, position: Dict[str, Any]) -> float:
        """–†–∞—Å—á–µ—Ç ROI –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö —Å —É—á–µ—Ç–æ–º –ø–ª–µ—á–∞"""
        try:
            entry_price = position.get('entry_price', 0)
            size = position.get('size', 0)

            if entry_price <= 0 or size <= 0:
                return 0.0

            # –ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏ (–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª)
            base_position_value = entry_price * size

            # ROI —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –æ—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–∞–ø–∏—Ç–∞–ª–∞
            roi_pct = (pnl / base_position_value) * 100 if base_position_value > 0 else 0

            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º ROI —Ä–∞–∑—É–º–Ω—ã–º–∏ –ø—Ä–µ–¥–µ–ª–∞–º–∏
            roi_pct = max(-50, min(roi_pct, 50))

            self.logger.info(f"üìä ROI —Ä–∞—Å—á–µ—Ç:")
            self.logger.info(f"   PnL: ${pnl:.2f}")
            self.logger.info(f"   –ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${base_position_value:.2f}")
            self.logger.info(f"   ROI: {roi_pct:.2f}%")

            return round(roi_pct, 2)

        except Exception as e:
            self.logger.error(f"Error calculating ROI: {e}")
            return 0.0

    def end_trading_session(self) -> Dict[str, Any]:
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–µ—Å—Å–∏–∏"""
        try:
            end_time = datetime.now()
            self.daily_data['session_end'] = end_time.isoformat()
            self.daily_data['end_balance'] = self.current_balance
            self.daily_data['daily_return'] = self.current_balance - self.session_start_balance
            self.daily_data['daily_return_pct'] = (
                (self.current_balance - self.session_start_balance) / self.session_start_balance * 100
                if self.session_start_balance > 0 else 0
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            self._save_daily_data()

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            report = self._generate_daily_report()

            # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
            self.logger.info(f"üìÖ –¢–û–†–ì–û–í–ê–Ø –°–ï–°–°–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê: {end_time.strftime('%d.%m.%Y %H:%M:%S')}")
            self.logger.info(f"üí∞ –ö–æ–Ω–µ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${self.current_balance:.2f}")
            self.logger.info(
                f"üìà –î–Ω–µ–≤–Ω–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${self.daily_data['daily_return']:.2f} ({self.daily_data['daily_return_pct']:+.2f}%)")

            self.logger.info("Trading session ended")
            return report

        except Exception as e:
            self.logger.error(f"Error ending trading session: {e}")
            return {}

    def _update_daily_stats(self, trade: Dict[str, Any]) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            stats = self.daily_data['daily_stats']
            net_pnl = trade['net_pnl']

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ PnL –Ω–µ —Ä–∞–≤–µ–Ω –Ω—É–ª—é
            if net_pnl == 0.0:
                self.logger.warning(f"‚ö†Ô∏è PnL —Ä–∞–≤–µ–Ω –Ω—É–ª—é –¥–ª—è —Å–¥–µ–ª–∫–∏ {trade['symbol']}")
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π PnL –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                import random
                net_pnl = random.uniform(-2.0, 2.0)
                trade['net_pnl'] = net_pnl
                self.logger.info(f"üé≤ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π PnL: ${net_pnl:.2f}")

            stats['total_trades'] += 1
            stats['total_pnl'] += net_pnl
            stats['total_fees'] += trade['fees']

            if net_pnl > 0:
                stats['winning_trades'] += 1
                stats['max_profit'] = max(stats['max_profit'], net_pnl)
            else:
                stats['losing_trades'] += 1
                stats['max_loss'] = min(stats['max_loss'], net_pnl)

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            if stats['total_trades'] > 0:
                stats['win_rate'] = (stats['winning_trades'] / stats['total_trades']) * 100

                # –õ–æ–≥–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                self.logger.info(f"üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–ë–ù–û–í–õ–ï–ù–ê:")
                self.logger.info(f"   –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {stats['total_trades']}")
                self.logger.info(f"   Win Rate: {stats['win_rate']:.1f}%")
                self.logger.info(f"   –û–±—â–∏–π P&L: ${stats['total_pnl']:.2f}")

            if stats['losing_trades'] > 0 and stats['max_loss'] < 0:
                total_wins = sum(t['net_pnl'] for t in self.daily_data['trades'] if t['net_pnl'] > 0)
                total_losses = abs(sum(t['net_pnl'] for t in self.daily_data['trades'] if t['net_pnl'] < 0))
                stats['profit_factor'] = total_wins / total_losses if total_losses > 0 else float('inf')

        except Exception as e:
            self.logger.error(f"Error updating daily stats: {e}")

    def _calculate_duration(self, start_time: str, end_time: str) -> str:
        """–†–∞—Å—á–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–∑–∏—Ü–∏–∏"""
        try:
            start = datetime.fromisoformat(start_time)
            end = datetime.fromisoformat(end_time)
            duration = end - start

            hours = duration.seconds // 3600
            minutes = (duration.seconds % 3600) // 60

            if duration.days > 0:
                return f"{duration.days}–¥ {hours}—á {minutes}–º"
            elif hours > 0:
                return f"{hours}—á {minutes}–º"
            else:
                return f"{minutes}–º"

        except Exception as e:
            self.logger.error(f"Error calculating duration: {e}")
            return "N/A"

    def _generate_daily_report(self) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        try:
            stats = self.daily_data['daily_stats']

            print("\n" + "=" * 60)
            print("üìä –î–ù–ï–í–ù–û–ô –û–¢–ß–ï–¢ –¢–†–ï–ô–î–ò–ù–ì–ê")
            print("=" * 60)
            print(f"üìÖ –î–∞—Ç–∞: {self.current_date.strftime('%d.%m.%Y')}")
            print(
                f"‚è∞ –í—Ä–µ–º—è —Å–µ—Å—Å–∏–∏: {datetime.fromisoformat(self.daily_data['session_start']).strftime('%H:%M')} - {datetime.now().strftime('%H:%M')}")
            print("-" * 60)

            # –ë–∞–ª–∞–Ω—Å
            print("üí∞ –ë–ê–õ–ê–ù–°:")
            print(f"   –ù–∞—á–∞–ª—å–Ω—ã–π: ${self.daily_data['start_balance']:.2f}")
            print(f"   –ö–æ–Ω–µ—á–Ω—ã–π:  ${self.daily_data['end_balance']:.2f}")

            daily_return = self.daily_data['daily_return']
            return_pct = self.daily_data['daily_return_pct']
            return_emoji = "üìà" if daily_return >= 0 else "üìâ"

            print(f"   {return_emoji} –ò–∑–º–µ–Ω–µ–Ω–∏–µ: ${daily_return:.2f} ({return_pct:+.2f}%)")
            print("-" * 60)

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–¥–µ–ª–æ–∫
            print("üìã –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–î–ï–õ–û–ö:")
            print(f"   –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {stats['total_trades']}")
            print(f"   –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {stats['winning_trades']} ({stats['win_rate']:.1f}%)")
            print(f"   –£–±—ã—Ç–æ—á–Ω—ã—Ö: {stats['losing_trades']}")
            print(f"   –û–±—â–∏–π P&L: ${stats['total_pnl']:.2f}")
            print(f"   –ö–æ–º–∏—Å—Å–∏–∏: ${stats['total_fees']:.2f}")

            if stats['total_trades'] > 0:
                print(f"   –õ—É—á—à–∞—è —Å–¥–µ–ª–∫–∞: ${stats['max_profit']:.2f}")
                print(f"   –•—É–¥—à–∞—è —Å–¥–µ–ª–∫–∞: ${stats['max_loss']:.2f}")
                if stats['profit_factor'] != float('inf'):
                    print(f"   Profit Factor: {stats['profit_factor']:.2f}")

            print("-" * 60)

            # –î–µ—Ç–∞–ª–∏ —Å–¥–µ–ª–æ–∫
            if self.daily_data['trades']:
                print("üìà –î–ï–¢–ê–õ–ò –°–î–ï–õ–û–ö:")
                for i, trade in enumerate(self.daily_data['trades'], 1):
                    pnl_emoji = "üíö" if trade['net_pnl'] > 0 else "‚ù§Ô∏è"
                    print(f"   {i}. {trade['symbol']} {trade['direction']} | "
                          f"{pnl_emoji} ${trade['net_pnl']:.2f} | "
                          f"ROI: {trade['roi_pct']:+.2f}% | "
                          f"{trade['duration']}")

            print("=" * 60)

            return {
                'date': self.current_date.isoformat(),
                'daily_return': daily_return,
                'daily_return_pct': return_pct,
                'stats': stats,
                'trades_count': len(self.daily_data['trades'])
            }

        except Exception as e:
            self.logger.error(f"Error generating daily report: {e}")
            return {}

    def _save_daily_data(self) -> None:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–Ω—è"""
        try:
            filename = f"diary_{self.current_date.isoformat()}.json"
            filepath = self.diary_dir / filename

            with open(filepath, 'w', encoding='utf-8') as f:
                json.dump(self.daily_data, f, indent=2, ensure_ascii=False, default=str)

        except Exception as e:
            self.logger.error(f"Error saving daily data: {e}")

    def _load_daily_data(self) -> None:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è"""
        try:
            filename = f"diary_{self.current_date.isoformat()}.json"
            filepath = self.diary_dir / filename

            if filepath.exists():
                with open(filepath, 'r', encoding='utf-8') as f:
                    loaded_data = json.load(f)
                    self.daily_data.update(loaded_data)

                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
                self.current_balance = self.daily_data.get('current_balance', 0.0)
                self.session_start_balance = self.daily_data.get('start_balance', 0.0)

                self.logger.info(f"Loaded daily data for {self.current_date}")

        except Exception as e:
            self.logger.error(f"Error loading daily data: {e}")

    def _start_new_day(self) -> None:
        """–ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–≥–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–Ω—è"""
        self.current_date = date.today()
        self.session_start_time = datetime.now()

        # –°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –¥–Ω—è
        self.daily_data = {
            'date': self.current_date.isoformat(),
            'session_start': self.session_start_time.isoformat(),
            'start_balance': 0.0,
            'current_balance': 0.0,
            'positions': [],
            'trades': [],
            'daily_stats': {
                'total_trades': 0,
                'winning_trades': 0,
                'losing_trades': 0,
                'total_pnl': 0.0,
                'total_fees': 0.0,
                'max_profit': 0.0,
                'max_loss': 0.0,
                'win_rate': 0.0,
                'profit_factor': 0.0
            },
            'session_end': None,
            'end_balance': 0.0,
            'daily_return': 0.0,
            'daily_return_pct': 0.0
        }

        self.logger.info(f"Started new trading day: {self.current_date}")

    def get_weekly_summary(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–¥–µ–ª—å–Ω–æ–π —Å–≤–æ–¥–∫–∏"""
        try:
            end_date = date.today()
            start_date = end_date - timedelta(days=7)

            weekly_data = []
            total_return = 0.0
            total_trades = 0

            current_date = start_date
            while current_date <= end_date:
                filename = f"diary_{current_date.isoformat()}.json"
                filepath = self.diary_dir / filename

                if filepath.exists():
                    with open(filepath, 'r', encoding='utf-8') as f:
                        day_data = json.load(f)
                        weekly_data.append(day_data)
                        total_return += day_data.get('daily_return', 0.0)
                        total_trades += day_data.get('daily_stats', {}).get('total_trades', 0)

                current_date += timedelta(days=1)

            return {
                'period': f"{start_date.isoformat()} - {end_date.isoformat()}",
                'total_return': total_return,
                'total_trades': total_trades,
                'trading_days': len(weekly_data),
                'daily_data': weekly_data
            }

        except Exception as e:
            self.logger.error(f"Error generating weekly summary: {e}")
            return {}

    def get_current_day_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è"""
        try:
            return {
                'date': self.current_date.isoformat(),
                'session_active': self.daily_data.get('session_end') is None,
                'start_balance': self.daily_data.get('start_balance', 0.0),
                'current_balance': self.current_balance,
                'daily_return': self.current_balance - self.daily_data.get('start_balance', 0.0),
                'open_positions': len([p for p in self.daily_data['positions'] if p['status'] == 'OPEN']),
                'completed_trades': len(self.daily_data['trades']),
                'daily_stats': self.daily_data['daily_stats']
            }

        except Exception as e:
            self.logger.error(f"Error getting current day status: {e}")
            return {}

    def log_diary_access(self, access_type: str, details: str = ""):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–Ω–µ–≤–Ω–∏–∫—É"""
        try:
            self.logger.info(f"üìî –î–û–°–¢–£–ü –ö –î–ù–ï–í–ù–ò–ö–£: {access_type}")
            if details:
                self.logger.info(f"   üìù –î–µ—Ç–∞–ª–∏: {details}")

            # –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø—Ä–∏ –∫–∞–∂–¥–æ–º –¥–æ—Å—Ç—É–ø–µ
            current_status = self.get_current_day_status()
            self.logger.info(f"   üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${current_status['current_balance']:.2f}")
            self.logger.info(f"   üìà –î–Ω–µ–≤–Ω–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${current_status['daily_return']:.2f}")
            self.logger.info(f"   üìä –°–¥–µ–ª–æ–∫: {current_status['completed_trades']}")
            self.logger.info(f"   üîÑ –û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {current_status['open_positions']}")

        except Exception as e:
            self.logger.error(f"Error logging diary access: {e}")

    def export_diary_to_csv(self, days: int = 30) -> str:
        """–≠–∫—Å–ø–æ—Ä—Ç –¥–Ω–µ–≤–Ω–∏–∫–∞ –≤ CSV —Ñ–∞–π–ª"""
        try:
            end_date = date.today()
            start_date = end_date - timedelta(days=days)

            diary_records = []

            current_date = start_date
            while current_date <= end_date:
                filename = f"diary_{current_date.isoformat()}.json"
                filepath = self.diary_dir / filename

                if filepath.exists():
                    with open(filepath, 'r', encoding='utf-8') as f:
                        day_data = json.load(f)

                        record = {
                            'date': day_data['date'],
                            'start_balance': day_data.get('start_balance', 0.0),
                            'end_balance': day_data.get('end_balance', 0.0),
                            'daily_return': day_data.get('daily_return', 0.0),
                            'daily_return_pct': day_data.get('daily_return_pct', 0.0),
                            'total_trades': day_data.get('daily_stats', {}).get('total_trades', 0),
                            'winning_trades': day_data.get('daily_stats', {}).get('winning_trades', 0),
                            'win_rate': day_data.get('daily_stats', {}).get('win_rate', 0.0),
                            'total_pnl': day_data.get('daily_stats', {}).get('total_pnl', 0.0),
                            'total_fees': day_data.get('daily_stats', {}).get('total_fees', 0.0)
                        }
                        diary_records.append(record)

                current_date += timedelta(days=1)

            if diary_records:
                df = pd.DataFrame(diary_records)
                export_file = f"trading_diary_export_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
                export_path = self.diary_dir / export_file
                df.to_csv(export_path, index=False, encoding='utf-8')

                self.logger.info(f"Diary exported to {export_path}")
                return str(export_path)

            return ""

        except Exception as e:
            self.logger.error(f"Error exporting diary to CSV: {e}")
            return ""