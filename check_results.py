#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–∞–±–æ—Ç—ã —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞
"""

import os
import json
from datetime import datetime, date
from pathlib import Path


def analyze_bot_results():
    """–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
    print("üìä –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –†–ê–ë–û–¢–´ –ë–û–¢–ê")
    print("=" * 60)

    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤
    print("\nüìÑ –ê–ù–ê–õ–ò–ó –õ–û–ì–û–í:")
    log_file = f"logs/trading_{datetime.now().strftime('%Y%m%d')}.log"

    if os.path.exists(log_file):
        with open(log_file, 'r', encoding='utf-8') as f:
            lines = f.readlines()

        total_lines = len(lines)
        errors = len([l for l in lines if "ERROR" in l])
        open_signals = len([l for l in lines if "Strategy result" in l and "OPEN" in l])
        close_signals = len([l for l in lines if "Strategy result" in l and "CLOSE" in l])
        cycles = len([l for l in lines if "Trading cycle started" in l])

        print(f"   üìù –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total_lines}")
        print(f"   üîÑ –¢–æ—Ä–≥–æ–≤—ã—Ö —Ü–∏–∫–ª–æ–≤: {cycles}")
        print(f"   üìà OPEN —Å–∏–≥–Ω–∞–ª–æ–≤: {open_signals}")
        print(f"   üìâ CLOSE —Å–∏–≥–Ω–∞–ª–æ–≤: {close_signals}")
        print(f"   ‚ùå –û—à–∏–±–æ–∫: {errors}")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–≥–Ω–∞–ª—ã
        print(f"\nüéØ –ü–û–°–õ–ï–î–ù–ò–ï –°–ò–ì–ù–ê–õ–´:")
        signal_lines = [l for l in lines if "Strategy result" in l][-10:]
        for line in signal_lines:
            print(f"   {line.strip()}")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏
        if errors > 0:
            print(f"\nüö® –ü–û–°–õ–ï–î–ù–ò–ï –û–®–ò–ë–ö–ò:")
            error_lines = [l for l in lines if "ERROR" in l][-5:]
            for line in error_lines:
                print(f"   {line.strip()}")
    else:
        print(f"   ‚ùå –õ–æ–≥ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {log_file}")

    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–≤–Ω–∏–∫–∞
    print(f"\nüìî –ê–ù–ê–õ–ò–ó –î–ù–ï–í–ù–ò–ö–ê:")
    diary_file = f"data/diary/diary_{date.today().isoformat()}.json"

    if os.path.exists(diary_file):
        with open(diary_file, 'r', encoding='utf-8') as f:
            diary_data = json.load(f)

        start_balance = diary_data.get('start_balance', 0)
        current_balance = diary_data.get('current_balance', 0)
        daily_return = diary_data.get('daily_return', 0)
        trades = diary_data.get('trades', [])
        positions = diary_data.get('positions', [])

        print(f"   üí∞ –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${start_balance:.2f}")
        print(f"   üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${current_balance:.2f}")
        print(f"   üìà –î–Ω–µ–≤–Ω–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${daily_return:.2f}")
        print(f"   üìä –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {len(trades)}")
        print(f"   üîÑ –ü–æ–∑–∏—Ü–∏–π: {len(positions)}")

        # –î–µ—Ç–∞–ª–∏ —Å–¥–µ–ª–æ–∫
        if trades:
            print(f"\nüíº –î–ï–¢–ê–õ–ò –°–î–ï–õ–û–ö:")
            for i, trade in enumerate(trades, 1):
                pnl_emoji = "üíö" if trade.get('net_pnl', 0) > 0 else "‚ù§Ô∏è"
                print(f"   {i}. {trade['symbol']} {trade['direction']} | "
                      f"{pnl_emoji} ${trade.get('net_pnl', 0):.2f} | "
                      f"ROI: {trade.get('roi_pct', 0):+.2f}%")

        # –û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
        open_positions = [p for p in positions if p.get('status') == 'OPEN']
        if open_positions:
            print(f"\nüîÑ –û–¢–ö–†–´–¢–´–ï –ü–û–ó–ò–¶–ò–ò:")
            for pos in open_positions:
                print(f"   ‚Ä¢ {pos['symbol']} {pos['direction']} | "
                      f"–†–∞–∑–º–µ—Ä: {pos['size']} | "
                      f"–¶–µ–Ω–∞: ${pos['entry_price']:.4f}")
    else:
        print(f"   ‚ùå –î–Ω–µ–≤–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω: {diary_file}")

    # 3. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")

    if os.path.exists(log_file):
        with open(log_file, 'r', encoding='utf-8') as f:
            content = f.read()

        # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º
        if "Volume Ratio: 0.00" in content:
            print("   üìä –û–±—ä–µ–º = 0 –≤–æ –≤—Å–µ—Ö –ø–∞—Ä–∞—Ö - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è TESTNET")

        if "LONG ANALYSIS: 2.0/1 conditions met" in content:
            print("   ‚úÖ –°–∏–≥–Ω–∞–ª—ã –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è - —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç!")

        if "balance=0.0" in content:
            print("   üí∞ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback –±–∞–ª–∞–Ω—Å - API –∫–ª—é—á–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–æ–≤—ã–º–∏")

        open_attempts = content.count("ATTEMPTING TO OPEN POSITION")
        if open_attempts > 0:
            print(f"   üéØ –ü–æ–ø—ã—Ç–æ–∫ –æ—Ç–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é: {open_attempts}")

        if "TESTNET ORDER PLACED" in content:
            print("   ‚úÖ –û—Ä–¥–µ—Ä–∞ —Ä–∞–∑–º–µ—â–∞–ª–∏—Å—å —É—Å–ø–µ—à–Ω–æ!")
        elif open_attempts > 0:
            print("   ‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∏ –±—ã–ª–∏, –Ω–æ –æ—Ä–¥–µ—Ä–∞ –Ω–µ —Ä–∞–∑–º–µ—â–∞–ª–∏—Å—å - –ø—Ä–æ–≤–µ—Ä–∏–º –ª–æ–≥–∏–∫—É")

    print(f"\nüéØ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
    print("   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–Ω–µ–≤–Ω–∏–∫: python utils/diary_viewer.py")
    print("   2. –ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤: python utils/log_analyzer.py")
    print("   3. –ï—Å–ª–∏ –Ω–µ—Ç —Å–¥–µ–ª–æ–∫ - —Å–Ω–∏–∑–∏–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤ user_config.py")


if __name__ == "__main__":
    analyze_bot_results()