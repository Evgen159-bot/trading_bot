"""
üîß –ó–ê–ì–†–£–ó–ß–ò–ö –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–û–ô –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò
==========================================

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –∑–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ –∏–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç –µ—ë —Å –æ—Å–Ω–æ–≤–Ω—ã–º –±–æ—Ç–æ–º.
"""

import logging
import sys
from typing import Dict, Any
from user_config import UserConfig
from config.trading_config import TradingConfig
from strategies.strategy_factory import StrategyFactory


class ConfigLoader:
    """–ó–∞–≥—Ä—É–∑—á–∏–∫ –∏ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""

    def __init__(self):
        self.logger = logging.getLogger(__name__)
        self.user_config = UserConfig()
        self.strategy_factory = StrategyFactory()

    def load_and_validate(self) -> bool:
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏

        Returns:
            bool: True –µ—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞
        """
        try:
            print("\nüîç –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")

            # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            is_valid, errors = self.user_config.validate_config()

            if not is_valid:
                print("‚ùå –û–®–ò–ë–ö–ò –í –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò:")
                for error in errors:
                    print(f"   {error}")
                print("\nüîß –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –≤ —Ñ–∞–π–ª–µ user_config.py –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞")
                return False

            # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            self._apply_user_config()

            # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            if not self._validate_strategy_selection():
                return False

            print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            self.user_config.print_config_summary()

            return True

        except Exception as e:
            print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return False

    def _validate_strategy_selection(self) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        try:
            selected_strategy = self.user_config.SELECTED_STRATEGY

            if not self.strategy_factory.validate_strategy_name(selected_strategy):
                available = ', '.join(self.strategy_factory.get_available_strategies())
                print(f"‚ùå –ù–ï–ò–ó–í–ï–°–¢–ù–ê–Ø –°–¢–†–ê–¢–ï–ì–ò–Ø: {selected_strategy}")
                print(f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {available}")
                print("üîß –ò—Å–ø—Ä–∞–≤—å—Ç–µ SELECTED_STRATEGY –≤ —Ñ–∞–π–ª–µ user_config.py")
                return False

            strategy_info = self.user_config.get_strategy_info()
            print(f"\nüéØ –í—ã–±—Ä–∞–Ω–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: {strategy_info.get('name', selected_strategy)}")
            print(f"üìù –¢–∏–ø: {'–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º–∞—è' if strategy_info.get('type') == 'configurable' else '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è'}")

            return True

        except Exception as e:
            self.logger.error(f"Error validating strategy selection: {e}")
            return False

    def _apply_user_config(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –±–æ—Ç—É"""
        try:
            # API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            TradingConfig.API_KEY = self.user_config.BYBIT_API_KEY
            TradingConfig.API_SECRET = self.user_config.BYBIT_API_SECRET
            TradingConfig.TESTNET = self.user_config.USE_TESTNET

            # –¢–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã (—Ç–æ–ª—å–∫–æ –≤–∫–ª—é—á–µ–Ω–Ω—ã–µ)
            TradingConfig.TRADING_PAIRS = self.user_config.get_enabled_pairs()

            # –†–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç
            TradingConfig.RISK_MANAGEMENT.update(self.user_config.RISK_SETTINGS)

            # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã (—Ç–æ–ª—å–∫–æ –≤–∫–ª—é—á–µ–Ω–Ω—ã–µ)
            enabled_indicators = self.user_config.get_enabled_indicators()
            for indicator_name, config in enabled_indicators.items():
                if indicator_name in TradingConfig.INDICATORS:
                    TradingConfig.INDICATORS[indicator_name].update(config)

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            TradingConfig.STRATEGY_SETTINGS.update(self.user_config.STRATEGY_SETTINGS)

            # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            strategy_info = self.user_config.get_strategy_info()
            TradingConfig.STRATEGY_SETTINGS['strategy_name'] = strategy_info.get('name', self.user_config.SELECTED_STRATEGY)

            # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            TradingConfig.CYCLE_INTERVAL = self.user_config.TIME_SETTINGS['intervals']['cycle_interval']
            TradingConfig.TRADING_HOURS = self.user_config.TIME_SETTINGS['trading_hours']
            TradingConfig.TIMEFRAMES = self.user_config.TIME_SETTINGS['timeframes']

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            TradingConfig.NOTIFICATIONS = self.user_config.NOTIFICATIONS

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            TradingConfig.PERFORMANCE_SETTINGS = self.user_config.DATA_SETTINGS
            TradingConfig.CONNECTION_SETTINGS.update(self.user_config.SECURITY_SETTINGS)

            self.logger.info("User configuration applied successfully")

        except Exception as e:
            self.logger.error(f"Error applying user configuration: {e}")
            raise

    def create_strategy(self, market_analyzer, position_manager):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤—ã–±–æ—Ä–∞"""
        try:
            strategy = self.strategy_factory.create_strategy_from_config(
                self.user_config, market_analyzer, position_manager
            )

            if strategy is None:
                self.logger.error("Failed to create strategy")
                return None

            self.logger.info(f"Successfully created strategy: {strategy.name}")
            return strategy

        except Exception as e:
            self.logger.error(f"Error creating strategy: {e}")
            return None

    def get_balance_info(self) -> Dict[str, float]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–ª–∞–Ω—Å–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        return {
            'initial_balance': self.user_config.INITIAL_BALANCE,
            'min_balance_threshold': self.user_config.MIN_BALANCE_THRESHOLD
        }

    def is_demo_mode(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–º–æ —Ä–µ–∂–∏–º–∞"""
        return self.user_config.ADVANCED_SETTINGS['modes']['demo_mode']

    def is_paper_trading(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±—É–º–∞–∂–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        return self.user_config.ADVANCED_SETTINGS['modes']['paper_trading']

    def should_validate_strategy(self) -> bool:
        """–ù—É–∂–Ω–æ –ª–∏ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é"""
        return self.user_config.ADVANCED_SETTINGS['modes']['strategy_validation']

    def get_strategy_name(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        return self.user_config.SELECTED_STRATEGY

    def get_strategy_description(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        strategy_info = self.user_config.get_strategy_info()
        return strategy_info.get('description', 'No description available')


def load_user_configuration() -> ConfigLoader:
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏

    Returns:
        ConfigLoader: –ó–∞–≥—Ä—É–∑—á–∏–∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    """
    loader = ConfigLoader()

    if not loader.load_and_validate():
        print("\nüö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é!")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª user_config.py –∏ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏")
        sys.exit(1)

    return loader


if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    loader = load_user_configuration()
    print("\n‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")